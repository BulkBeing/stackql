<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 4.1.3 (Python 3.8.8 on darwin)" generated="20220719 22:23:50.111" rpa="false" schemaversion="2">
<suite id="s1" name="Functional" source="/Users/admin/stackql/stackql-devel/test/robot/functional">
<kw name="Prepare StackQL Environment" library="stackql" type="SETUP">
<kw name="Set Environment Variable" library="OperatingSystem">
<arg>OKTA_SECRET_KEY</arg>
<arg>${OKTA_SECRET_STR}</arg>
<doc>Sets an environment variable to a specified value.</doc>
<msg timestamp="20220719 22:23:50.224" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<status status="PASS" starttime="20220719 22:23:50.224" endtime="20220719 22:23:50.225"/>
</kw>
<kw name="Set Environment Variable" library="OperatingSystem">
<arg>GITHUB_SECRET_KEY</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<doc>Sets an environment variable to a specified value.</doc>
<msg timestamp="20220719 22:23:50.225" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<status status="PASS" starttime="20220719 22:23:50.225" endtime="20220719 22:23:50.225"/>
</kw>
<kw name="Set Environment Variable" library="OperatingSystem">
<arg>K8S_SECRET_KEY</arg>
<arg>${K8S_SECRET_STR}</arg>
<doc>Sets an environment variable to a specified value.</doc>
<msg timestamp="20220719 22:23:50.225" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<status status="PASS" starttime="20220719 22:23:50.225" endtime="20220719 22:23:50.225"/>
</kw>
<kw name="Start Mock Server" library="stackql">
<arg>${JSON_INIT_FILE_PATH_GOOGLE}</arg>
<arg>${MOCKSERVER_JAR}</arg>
<arg>${MOCKSERVER_PORT_GOOGLE}</arg>
<kw name="Start Process" library="Process">
<var>${process}</var>
<arg>java</arg>
<arg>\-Dfile.encoding\=UTF-8</arg>
<arg>\-Dmockserver.initializationJsonPath\=${_JSON_INIT_FILE_PATH}</arg>
<arg>\-jar</arg>
<arg>${_MOCKSERVER_JAR}</arg>
<arg>\-serverPort</arg>
<arg>${_MOCKSERVER_PORT}</arg>
<arg>\-logLevel</arg>
<arg>INFO</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20220719 22:23:50.227" level="INFO">Starting process:
java -Dfile.encoding=UTF-8 -Dmockserver.initializationJsonPath=/Users/admin/stackql/stackql-devel/test/mockserver/expectations/static-gcp-expectations.json -jar /Users/admin/stackql/stackql-devel/test/downloads/mockserver-netty-5.12.0-shaded.jar -serverPort 1080 -logLevel INFO</msg>
<msg timestamp="20220719 22:23:50.235" level="INFO">${process} = 1</msg>
<status status="PASS" starttime="20220719 22:23:50.226" endtime="20220719 22:23:50.235"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220719 22:23:55.239" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220719 22:23:50.236" endtime="20220719 22:23:55.239"/>
</kw>
<status status="PASS" starttime="20220719 22:23:50.226" endtime="20220719 22:23:55.240"/>
</kw>
<kw name="Start Mock Server" library="stackql">
<arg>${JSON_INIT_FILE_PATH_OKTA}</arg>
<arg>${MOCKSERVER_JAR}</arg>
<arg>${MOCKSERVER_PORT_OKTA}</arg>
<kw name="Start Process" library="Process">
<var>${process}</var>
<arg>java</arg>
<arg>\-Dfile.encoding\=UTF-8</arg>
<arg>\-Dmockserver.initializationJsonPath\=${_JSON_INIT_FILE_PATH}</arg>
<arg>\-jar</arg>
<arg>${_MOCKSERVER_JAR}</arg>
<arg>\-serverPort</arg>
<arg>${_MOCKSERVER_PORT}</arg>
<arg>\-logLevel</arg>
<arg>INFO</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20220719 22:23:55.244" level="INFO">Starting process:
java -Dfile.encoding=UTF-8 -Dmockserver.initializationJsonPath=/Users/admin/stackql/stackql-devel/test/mockserver/expectations/static-okta-expectations.json -jar /Users/admin/stackql/stackql-devel/test/downloads/mockserver-netty-5.12.0-shaded.jar -serverPort 1090 -logLevel INFO</msg>
<msg timestamp="20220719 22:23:55.253" level="INFO">${process} = 2</msg>
<status status="PASS" starttime="20220719 22:23:55.242" endtime="20220719 22:23:55.253"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220719 22:24:00.256" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220719 22:23:55.253" endtime="20220719 22:24:00.257"/>
</kw>
<status status="PASS" starttime="20220719 22:23:55.240" endtime="20220719 22:24:00.257"/>
</kw>
<kw name="Start Mock Server" library="stackql">
<arg>${JSON_INIT_FILE_PATH_GITHUB}</arg>
<arg>${MOCKSERVER_JAR}</arg>
<arg>${MOCKSERVER_PORT_GITHUB}</arg>
<kw name="Start Process" library="Process">
<var>${process}</var>
<arg>java</arg>
<arg>\-Dfile.encoding\=UTF-8</arg>
<arg>\-Dmockserver.initializationJsonPath\=${_JSON_INIT_FILE_PATH}</arg>
<arg>\-jar</arg>
<arg>${_MOCKSERVER_JAR}</arg>
<arg>\-serverPort</arg>
<arg>${_MOCKSERVER_PORT}</arg>
<arg>\-logLevel</arg>
<arg>INFO</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20220719 22:24:00.261" level="INFO">Starting process:
java -Dfile.encoding=UTF-8 -Dmockserver.initializationJsonPath=/Users/admin/stackql/stackql-devel/test/mockserver/expectations/static-github-expectations.json -jar /Users/admin/stackql/stackql-devel/test/downloads/mockserver-netty-5.12.0-shaded.jar -serverPort 1093 -logLevel INFO</msg>
<msg timestamp="20220719 22:24:00.274" level="INFO">${process} = 3</msg>
<status status="PASS" starttime="20220719 22:24:00.259" endtime="20220719 22:24:00.274"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220719 22:24:05.276" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220719 22:24:00.275" endtime="20220719 22:24:05.277"/>
</kw>
<status status="PASS" starttime="20220719 22:24:00.258" endtime="20220719 22:24:05.278"/>
</kw>
<kw name="Start Mock Server" library="stackql">
<arg>${JSON_INIT_FILE_PATH_AWS}</arg>
<arg>${MOCKSERVER_JAR}</arg>
<arg>${MOCKSERVER_PORT_AWS}</arg>
<kw name="Start Process" library="Process">
<var>${process}</var>
<arg>java</arg>
<arg>\-Dfile.encoding\=UTF-8</arg>
<arg>\-Dmockserver.initializationJsonPath\=${_JSON_INIT_FILE_PATH}</arg>
<arg>\-jar</arg>
<arg>${_MOCKSERVER_JAR}</arg>
<arg>\-serverPort</arg>
<arg>${_MOCKSERVER_PORT}</arg>
<arg>\-logLevel</arg>
<arg>INFO</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20220719 22:24:05.281" level="INFO">Starting process:
java -Dfile.encoding=UTF-8 -Dmockserver.initializationJsonPath=/Users/admin/stackql/stackql-devel/test/mockserver/expectations/static-aws-expectations.json -jar /Users/admin/stackql/stackql-devel/test/downloads/mockserver-netty-5.12.0-shaded.jar -serverPort 1091 -logLevel INFO</msg>
<msg timestamp="20220719 22:24:05.291" level="INFO">${process} = 4</msg>
<status status="PASS" starttime="20220719 22:24:05.279" endtime="20220719 22:24:05.291"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220719 22:24:10.293" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220719 22:24:05.291" endtime="20220719 22:24:10.293"/>
</kw>
<status status="PASS" starttime="20220719 22:24:05.278" endtime="20220719 22:24:10.294"/>
</kw>
<kw name="Start Mock Server" library="stackql">
<arg>${JSON_INIT_FILE_PATH_K8S}</arg>
<arg>${MOCKSERVER_JAR}</arg>
<arg>${MOCKSERVER_PORT_K8S}</arg>
<kw name="Start Process" library="Process">
<var>${process}</var>
<arg>java</arg>
<arg>\-Dfile.encoding\=UTF-8</arg>
<arg>\-Dmockserver.initializationJsonPath\=${_JSON_INIT_FILE_PATH}</arg>
<arg>\-jar</arg>
<arg>${_MOCKSERVER_JAR}</arg>
<arg>\-serverPort</arg>
<arg>${_MOCKSERVER_PORT}</arg>
<arg>\-logLevel</arg>
<arg>INFO</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20220719 22:24:10.297" level="INFO">Starting process:
java -Dfile.encoding=UTF-8 -Dmockserver.initializationJsonPath=/Users/admin/stackql/stackql-devel/test/mockserver/expectations/static-k8s-expectations.json -jar /Users/admin/stackql/stackql-devel/test/downloads/mockserver-netty-5.12.0-shaded.jar -serverPort 1092 -logLevel INFO</msg>
<msg timestamp="20220719 22:24:10.306" level="INFO">${process} = 5</msg>
<status status="PASS" starttime="20220719 22:24:10.295" endtime="20220719 22:24:10.307"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220719 22:24:15.309" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220719 22:24:10.308" endtime="20220719 22:24:15.309"/>
</kw>
<status status="PASS" starttime="20220719 22:24:10.294" endtime="20220719 22:24:15.310"/>
</kw>
<kw name="Start Mock Server" library="stackql">
<arg>${JSON_INIT_FILE_PATH_REGISTRY}</arg>
<arg>${MOCKSERVER_JAR}</arg>
<arg>${MOCKSERVER_PORT_REGISTRY}</arg>
<kw name="Start Process" library="Process">
<var>${process}</var>
<arg>java</arg>
<arg>\-Dfile.encoding\=UTF-8</arg>
<arg>\-Dmockserver.initializationJsonPath\=${_JSON_INIT_FILE_PATH}</arg>
<arg>\-jar</arg>
<arg>${_MOCKSERVER_JAR}</arg>
<arg>\-serverPort</arg>
<arg>${_MOCKSERVER_PORT}</arg>
<arg>\-logLevel</arg>
<arg>INFO</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20220719 22:24:15.313" level="INFO">Starting process:
java -Dfile.encoding=UTF-8 -Dmockserver.initializationJsonPath=/Users/admin/stackql/stackql-devel/test/mockserver/expectations/static-registry-expectations.json -jar /Users/admin/stackql/stackql-devel/test/downloads/mockserver-netty-5.12.0-shaded.jar -serverPort 1094 -logLevel INFO</msg>
<msg timestamp="20220719 22:24:15.323" level="INFO">${process} = 6</msg>
<status status="PASS" starttime="20220719 22:24:15.312" endtime="20220719 22:24:15.324"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220719 22:24:20.326" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220719 22:24:15.324" endtime="20220719 22:24:20.326"/>
</kw>
<status status="PASS" starttime="20220719 22:24:15.310" endtime="20220719 22:24:20.327"/>
</kw>
<kw name="Start StackQL PG Server mTLS" library="stackql">
<arg>${PG_SRV_PORT_MTLS}</arg>
<arg>${PG_SRV_MTLS_CFG_STR}</arg>
<if>
<branch type="IF" condition="&quot;${EXECUTION_PLATFORM}&quot; == &quot;native&quot;">
<kw name="Start Process" library="Process">
<var>${process}</var>
<arg>${STACKQL_EXE}</arg>
<arg>srv</arg>
<arg>\-\-registry\=${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>\-\-auth\=${AUTH_CFG_STR}</arg>
<arg>\-\-tls\.allowInsecure\=true</arg>
<arg>\-\-pgsrv\.address\=0.0.0.0</arg>
<arg>\-\-pgsrv\.port\=${_SRV_PORT_MTLS}</arg>
<arg>\-\-pgsrv\.tls</arg>
<arg>${_MTLS_CFG_STR}</arg>
<doc>Starts a new process on background.</doc>
<status status="NOT RUN" starttime="20220719 22:24:20.329" endtime="20220719 22:24:20.329"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>15s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 22:24:20.330" endtime="20220719 22:24:20.330"/>
</kw>
<status status="NOT RUN" starttime="20220719 22:24:20.329" endtime="20220719 22:24:20.330"/>
</branch>
<branch type="ELSE IF" condition="&quot;${EXECUTION_PLATFORM}&quot; == &quot;docker&quot;">
<kw name="Run Process" library="Process">
<var>${res}</var>
<arg>docker-compose</arg>
<arg>run</arg>
<arg>--rm</arg>
<arg>credentialsgen</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20220719 22:24:20.331" level="INFO">Starting process:
docker-compose run --rm credentialsgen</msg>
<msg timestamp="20220719 22:24:20.340" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:34.736" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:34.737" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220719 22:24:20.330" endtime="20220719 22:24:34.737"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${res.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220719 22:24:34.743" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220719 22:24:34.737" endtime="20220719 22:24:34.743"/>
</kw>
<kw name="Start Process" library="Process">
<var>${process}</var>
<arg>docker-compose</arg>
<arg>-p</arg>
<arg>mtls</arg>
<arg>run</arg>
<arg>--rm</arg>
<arg>-p${_SRV_PORT_MTLS}:${PG_SRV_PORT_DOCKER_MTLS}/tcp</arg>
<arg>stackqlsrv</arg>
<arg>bash</arg>
<arg>-c</arg>
<arg>srv</arg>
<arg>\-\-registry\=${REGISTRY_DOCKER_CFG_STR}</arg>
<arg>\-\-auth\=${AUTH_CFG_STR}</arg>
<arg>\-\-tls\.allowInsecure\=true</arg>
<arg>\-\-pgsrv\.address\=0.0.0.0</arg>
<arg>\-\-pgsrv\.port\=${PG_SRV_PORT_DOCKER_MTLS}</arg>
<arg>\-\-pgsrv\.tls</arg>
<arg>${PG_SRV_MTLS_DOCKER_CFG_STR}</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20220719 22:24:34.747" level="INFO">Starting process:
docker-compose -p mtls run --rm -p5476:5576/tcp stackqlsrv bash -c srv "--registry={\"url\": \"file:///opt/stackql/registry\", \"localDocRoot\": \"/opt/stackql/registry\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true --pgsrv.address=0.0.0.0 --pgsrv.port=5576 --pgsrv.tls "{\"keyFilePath\": \"/opt/stackql/srv/credentials/pg_server_key.pem\", \"certFilePath\": \"/opt/stackql/srv/credentials/pg_server_cert.pem\", \"clientCAs\": [\"$$(base64 -w 0 /opt/stackql/srv/credentials/pg_client_cert.pem)\"]}"</msg>
<msg timestamp="20220719 22:24:34.759" level="INFO">${process} = 8</msg>
<status status="PASS" starttime="20220719 22:24:34.744" endtime="20220719 22:24:34.759"/>
</kw>
<status status="PASS" starttime="20220719 22:24:20.330" endtime="20220719 22:24:34.760"/>
</branch>
<status status="PASS" starttime="20220719 22:24:20.328" endtime="20220719 22:24:34.760"/>
</if>
<status status="PASS" starttime="20220719 22:24:20.327" endtime="20220719 22:24:34.760"/>
</kw>
<kw name="Start StackQL PG Server unencrypted" library="stackql">
<arg>${PG_SRV_PORT_UNENCRYPTED}</arg>
<if>
<branch type="IF" condition="&quot;${EXECUTION_PLATFORM}&quot; == &quot;native&quot;">
<kw name="Start Process" library="Process">
<var>${process}</var>
<arg>${STACKQL_EXE}</arg>
<arg>srv</arg>
<arg>\-\-registry\=${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>\-\-auth\=${AUTH_CFG_STR}</arg>
<arg>\-\-tls\.allowInsecure\=true</arg>
<arg>\-\-pgsrv\.address\=0.0.0.0</arg>
<arg>\-\-pgsrv\.port\=${_SRV_PORT_UNENCRYPTED}</arg>
<doc>Starts a new process on background.</doc>
<status status="NOT RUN" starttime="20220719 22:24:34.762" endtime="20220719 22:24:34.762"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>15s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 22:24:34.762" endtime="20220719 22:24:34.762"/>
</kw>
<status status="NOT RUN" starttime="20220719 22:24:34.761" endtime="20220719 22:24:34.762"/>
</branch>
<branch type="ELSE IF" condition="&quot;${EXECUTION_PLATFORM}&quot; == &quot;docker&quot;">
<kw name="Start Process" library="Process">
<var>${process}</var>
<arg>docker-compose</arg>
<arg>-p</arg>
<arg>unencrypted</arg>
<arg>run</arg>
<arg>--rm</arg>
<arg>-p${_SRV_PORT_UNENCRYPTED}:${PG_SRV_PORT_DOCKER_UNENCRYPTED}/tcp</arg>
<arg>stackqlsrv</arg>
<arg>bash</arg>
<arg>-c</arg>
<arg>srv</arg>
<arg>\-\-registry\=${REGISTRY_DOCKER_CFG_STR}</arg>
<arg>\-\-auth\=${AUTH_CFG_STR}</arg>
<arg>\-\-tls\.allowInsecure\=true</arg>
<arg>\-\-pgsrv\.address\=0.0.0.0</arg>
<arg>\-\-pgsrv\.port\=${PG_SRV_PORT_DOCKER_UNENCRYPTED}</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20220719 22:24:34.768" level="INFO">Starting process:
docker-compose -p unencrypted run --rm -p5477:5577/tcp stackqlsrv bash -c srv "--registry={\"url\": \"file:///opt/stackql/registry\", \"localDocRoot\": \"/opt/stackql/registry\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true --pgsrv.address=0.0.0.0 --pgsrv.port=5577</msg>
<msg timestamp="20220719 22:24:34.786" level="INFO">${process} = 9</msg>
<status status="PASS" starttime="20220719 22:24:34.763" endtime="20220719 22:24:34.787"/>
</kw>
<status status="PASS" starttime="20220719 22:24:34.762" endtime="20220719 22:24:34.787"/>
</branch>
<status status="PASS" starttime="20220719 22:24:34.761" endtime="20220719 22:24:34.787"/>
</if>
<status status="PASS" starttime="20220719 22:24:34.760" endtime="20220719 22:24:34.788"/>
</kw>
<status status="PASS" starttime="20220719 22:23:50.224" endtime="20220719 22:24:34.788"/>
</kw>
<suite id="s1-s1" name="Stackql From Cmd Line" source="/Users/admin/stackql/stackql-devel/test/robot/functional/stackql_from_cmd_line.robot">
<test id="s1-s1-t1" name="Positive Control">
<kw name="Should Contain" library="BuiltIn">
<arg>''</arg>
<arg>''</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220719 22:24:34.824" endtime="20220719 22:24:34.825"/>
</kw>
<status status="PASS" starttime="20220719 22:24:34.822" endtime="20220719 22:24:34.826"/>
</test>
<test id="s1-s1-t2" name="Get Providers">
<kw name="Should StackQL Exec Contain">
<arg>${SHOW_PROVIDERS_STR}</arg>
<arg>okta</arg>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:24:34.834" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:34.834" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:34.834" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:34.836" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show providers;"</msg>
<msg timestamp="20220719 22:24:34.852" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:34.962" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:34.963" level="INFO">|--------|---------|
|  name  | version |
|--------|---------|
| aws    | v0.1.0  |
|--------|---------|
| github | v0.3.1  |
|--------|---------|
| google | v0.1.2  |
|--------|---------|
| k8s    | v0.1.0  |
|--------|---------|
| okta   | v1      |
|--------|---------|</msg>
<msg timestamp="20220719 22:24:34.963" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:34.829" endtime="20220719 22:24:34.963"/>
</kw>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_CANONICAL_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:24:34.970" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:34.970" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:34.970" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:34.971" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry\", \"verifyConfig\": {\"nopVerify\": false}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show providers;"</msg>
<msg timestamp="20220719 22:24:34.982" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:35.016" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:35.017" level="INFO">|--------|---------|
|  name  | version |
|--------|---------|
| aws    | v0.1.0  |
|--------|---------|
| github | v0.3.1  |
|--------|---------|
| google | v0.1.2  |
|--------|---------|
| k8s    | v0.1.0  |
|--------|---------|
| okta   | v1      |
|--------|---------|</msg>
<msg timestamp="20220719 22:24:35.017" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:34.964" endtime="20220719 22:24:35.018"/>
</kw>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_DEPRECATED_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:24:35.021" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:35.021" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:35.021" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:35.022" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-deprecated\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-deprecated\", \"verifyConfig\": {\"nopVerify\": false}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show providers;"</msg>
<msg timestamp="20220719 22:24:35.034" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:35.067" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:35.067" level="INFO">|--------|---------|
|  name  | version |
|--------|---------|
| google | v1      |
|--------|---------|
| okta   | v1      |
|--------|---------|</msg>
<msg timestamp="20220719 22:24:35.067" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:35.019" endtime="20220719 22:24:35.068"/>
</kw>
<status status="PASS" starttime="20220719 22:24:34.828" endtime="20220719 22:24:35.069"/>
</kw>
<kw name="Should StackQL Novel Exec Contain">
<arg>${SHOW_PROVIDERS_STR}</arg>
<arg>v0.3.1</arg>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:24:35.074" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:35.075" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:35.075" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:35.075" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show providers;"</msg>
<msg timestamp="20220719 22:24:35.087" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:35.126" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:35.126" level="INFO">|--------|---------|
|  name  | version |
|--------|---------|
| aws    | v0.1.0  |
|--------|---------|
| github | v0.3.1  |
|--------|---------|
| google | v0.1.2  |
|--------|---------|
| k8s    | v0.1.0  |
|--------|---------|
| okta   | v1      |
|--------|---------|</msg>
<msg timestamp="20220719 22:24:35.126" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:35.072" endtime="20220719 22:24:35.127"/>
</kw>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_CANONICAL_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:24:35.134" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:35.134" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:35.134" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:35.135" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry\", \"verifyConfig\": {\"nopVerify\": false}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show providers;"</msg>
<msg timestamp="20220719 22:24:35.148" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:35.176" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:35.177" level="INFO">|--------|---------|
|  name  | version |
|--------|---------|
| aws    | v0.1.0  |
|--------|---------|
| github | v0.3.1  |
|--------|---------|
| google | v0.1.2  |
|--------|---------|
| k8s    | v0.1.0  |
|--------|---------|
| okta   | v1      |
|--------|---------|</msg>
<msg timestamp="20220719 22:24:35.177" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:35.128" endtime="20220719 22:24:35.177"/>
</kw>
<status status="PASS" starttime="20220719 22:24:35.070" endtime="20220719 22:24:35.178"/>
</kw>
<kw name="Should StackQL Exec Contain JSON output">
<arg>${SHOW_PROVIDERS_STR}</arg>
<arg>okta</arg>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<arg>\-o\=json</arg>
<msg timestamp="20220719 22:24:35.182" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:35.182" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:35.182" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:35.183" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show providers;" -o=json</msg>
<msg timestamp="20220719 22:24:35.191" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:35.225" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:35.225" level="INFO">[{"name":"aws","version":"v0.1.0"},{"name":"github","version":"v0.3.1"},{"name":"google","version":"v0.1.2"},{"name":"k8s","version":"v0.1.0"},{"name":"okta","version":"v1"}]</msg>
<msg timestamp="20220719 22:24:35.225" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:35.180" endtime="20220719 22:24:35.226"/>
</kw>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_CANONICAL_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<arg>\-o\=json</arg>
<msg timestamp="20220719 22:24:35.229" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:35.229" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:35.229" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:35.230" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry\", \"verifyConfig\": {\"nopVerify\": false}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show providers;" -o=json</msg>
<msg timestamp="20220719 22:24:35.244" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:35.280" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:35.280" level="INFO">[{"name":"aws","version":"v0.1.0"},{"name":"github","version":"v0.3.1"},{"name":"google","version":"v0.1.2"},{"name":"k8s","version":"v0.1.0"},{"name":"okta","version":"v1"}]</msg>
<msg timestamp="20220719 22:24:35.280" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:35.226" endtime="20220719 22:24:35.280"/>
</kw>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_DEPRECATED_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<arg>\-o\=json</arg>
<msg timestamp="20220719 22:24:35.283" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:35.283" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:35.283" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:35.284" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-deprecated\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-deprecated\", \"verifyConfig\": {\"nopVerify\": false}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show providers;" -o=json</msg>
<msg timestamp="20220719 22:24:35.303" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:35.350" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:35.350" level="INFO">[{"name":"google","version":"v1"},{"name":"okta","version":"v1"}]</msg>
<msg timestamp="20220719 22:24:35.350" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:35.281" endtime="20220719 22:24:35.351"/>
</kw>
<status status="PASS" starttime="20220719 22:24:35.178" endtime="20220719 22:24:35.352"/>
</kw>
<status status="PASS" starttime="20220719 22:24:34.826" endtime="20220719 22:24:35.352"/>
</test>
<test id="s1-s1-t3" name="Get Providers No Config">
<kw name="Should StackQL No Cfg Exec Contain">
<arg>${SHOW_PROVIDERS_STR}</arg>
<arg>name</arg>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${EMPTY}</arg>
<arg>${EMPTY}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:24:35.362" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:35.362" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:35.362" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:35.362" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec --tls.allowInsecure=true "show providers;"</msg>
<msg timestamp="20220719 22:24:35.371" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:35.402" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:35.403" level="INFO">|------|---------|
| name | version |
|------|---------|</msg>
<msg timestamp="20220719 22:24:35.403" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:35.355" endtime="20220719 22:24:35.404"/>
</kw>
<status status="PASS" starttime="20220719 22:24:35.354" endtime="20220719 22:24:35.404"/>
</kw>
<status status="PASS" starttime="20220719 22:24:35.353" endtime="20220719 22:24:35.405"/>
</test>
<test id="s1-s1-t4" name="Get Okta Services">
<kw name="Should StackQL Exec Contain">
<arg>${SHOW_OKTA_SERVICES_FILTERED_STR}</arg>
<arg>Application${SPACE}API</arg>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:24:35.410" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:35.410" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:35.410" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:35.410" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show services from okta like 'app%';"</msg>
<msg timestamp="20220719 22:24:35.424" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:35.456" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:35.456" level="INFO">|----------------|-------------|-----------------|
|       id       |    name     |      title      |
|----------------|-------------|-----------------|
| application:v1 | application | Application API |
|----------------|-------------|-----------------|</msg>
<msg timestamp="20220719 22:24:35.456" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:35.409" endtime="20220719 22:24:35.456"/>
</kw>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_CANONICAL_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:24:35.459" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:35.459" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:35.459" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:35.460" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry\", \"verifyConfig\": {\"nopVerify\": false}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show services from okta like 'app%';"</msg>
<msg timestamp="20220719 22:24:35.471" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:35.552" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:35.552" level="INFO">|----------------|-------------|-----------------|
|       id       |    name     |      title      |
|----------------|-------------|-----------------|
| application:v1 | application | Application API |
|----------------|-------------|-----------------|</msg>
<msg timestamp="20220719 22:24:35.552" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:35.457" endtime="20220719 22:24:35.553"/>
</kw>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_DEPRECATED_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:24:35.555" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:35.555" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:35.555" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:35.556" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-deprecated\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-deprecated\", \"verifyConfig\": {\"nopVerify\": false}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show services from okta like 'app%';"</msg>
<msg timestamp="20220719 22:24:35.568" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:35.611" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:35.611" level="INFO">|----------------|-------------|-----------------|
|       id       |    name     |      title      |
|----------------|-------------|-----------------|
| application:v1 | application | Application API |
|----------------|-------------|-----------------|</msg>
<msg timestamp="20220719 22:24:35.611" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:35.553" endtime="20220719 22:24:35.611"/>
</kw>
<status status="PASS" starttime="20220719 22:24:35.408" endtime="20220719 22:24:35.612"/>
</kw>
<status status="PASS" starttime="20220719 22:24:35.407" endtime="20220719 22:24:35.612"/>
</test>
<test id="s1-s1-t5" name="Get Okta Application Resources">
<kw name="Should StackQL Exec Contain">
<arg>${SHOW_OKTA_APPLICATION_RESOURCES_FILTERED_STR}</arg>
<arg>grants</arg>
<arg>groups</arg>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:24:35.618" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:35.618" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:35.619" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:35.619" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show resources from okta.application like 'gr%';"</msg>
<msg timestamp="20220719 22:24:35.628" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:35.755" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:35.755" level="INFO">|--------|-------------------------|
|  name  |           id            |
|--------|-------------------------|
| grants | okta.application.grants |
|--------|-------------------------|
| groups | okta.application.groups |
|--------|-------------------------|</msg>
<msg timestamp="20220719 22:24:35.755" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:35.617" endtime="20220719 22:24:35.756"/>
</kw>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_CANONICAL_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:24:35.758" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:35.758" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:35.758" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:35.759" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry\", \"verifyConfig\": {\"nopVerify\": false}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show resources from okta.application like 'gr%';"</msg>
<msg timestamp="20220719 22:24:35.771" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:35.942" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:35.942" level="INFO">|--------|-------------------------|
|  name  |           id            |
|--------|-------------------------|
| grants | okta.application.grants |
|--------|-------------------------|
| groups | okta.application.groups |
|--------|-------------------------|</msg>
<msg timestamp="20220719 22:24:35.942" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:35.757" endtime="20220719 22:24:35.943"/>
</kw>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_DEPRECATED_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:24:35.946" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:35.946" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:35.946" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:35.948" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-deprecated\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-deprecated\", \"verifyConfig\": {\"nopVerify\": false}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show resources from okta.application like 'gr%';"</msg>
<msg timestamp="20220719 22:24:35.975" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:36.124" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:36.124" level="INFO">|--------|-------------------------|
|  name  |           id            |
|--------|-------------------------|
| grants | okta.application.grants |
|--------|-------------------------|
| groups | okta.application.groups |
|--------|-------------------------|</msg>
<msg timestamp="20220719 22:24:36.125" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:35.943" endtime="20220719 22:24:36.125"/>
</kw>
<status status="PASS" starttime="20220719 22:24:35.614" endtime="20220719 22:24:36.126"/>
</kw>
<status status="PASS" starttime="20220719 22:24:35.613" endtime="20220719 22:24:36.127"/>
</test>
<test id="s1-s1-t6" name="Describe GitHub Repos Pages">
<kw name="Should StackQL Novel Exec Contain">
<arg>${DESCRIBE_GITHUB_REPOS_PAGES}</arg>
<arg>https_certificate</arg>
<arg>url</arg>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:24:36.133" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:36.133" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:36.133" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:36.133" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "describe github.repos.pages;"</msg>
<msg timestamp="20220719 22:24:36.150" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:36.574" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:36.574" level="INFO">|------------------------------|---------|
|             name             |  type   |
|------------------------------|---------|
| public                       | boolean |
|------------------------------|---------|
| html_url                     | string  |
|------------------------------|---------|
| url                          | string  |
|------------------------------|---------|
| custom_404                   | boolean |
|------------------------------|---------|
| status                       | string  |
|------------------------------|---------|
| pending_domain_unverified_at | string  |
|------------------------------|---------|
| cname                        | string  |
|------------------------------|---------|
| source                       | object  |
|------------------------------|---------|
| protected_domain_state       | string  |
|------------------------------|---------|
| https_certificate            | object  |
|------------------------------|---------|
| https_enforced               | boolean |
|------------------------------|---------|</msg>
<msg timestamp="20220719 22:24:36.574" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:36.131" endtime="20220719 22:24:36.575"/>
</kw>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_CANONICAL_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:24:36.577" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:36.577" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:36.577" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:36.577" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry\", \"verifyConfig\": {\"nopVerify\": false}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "describe github.repos.pages;"</msg>
<msg timestamp="20220719 22:24:36.586" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:37.667" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:37.667" level="INFO">|------------------------------|---------|
|             name             |  type   |
|------------------------------|---------|
| cname                        | string  |
|------------------------------|---------|
| pending_domain_unverified_at | string  |
|------------------------------|---------|
| protected_domain_state       | string  |
|------------------------------|---------|
| html_url                     | string  |
|------------------------------|---------|
| custom_404                   | boolean |
|------------------------------|---------|
| status                       | string  |
|------------------------------|---------|
| https_certificate            | object  |
|------------------------------|---------|
| https_enforced               | boolean |
|------------------------------|---------|
| public                       | boolean |
|------------------------------|---------|
| url                          | string  |
|------------------------------|---------|
| source                       | object  |
|------------------------------|---------|</msg>
<msg timestamp="20220719 22:24:37.667" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:36.575" endtime="20220719 22:24:37.668"/>
</kw>
<status status="PASS" starttime="20220719 22:24:36.129" endtime="20220719 22:24:37.669"/>
</kw>
<status status="PASS" starttime="20220719 22:24:36.127" endtime="20220719 22:24:37.670"/>
</test>
<test id="s1-s1-t7" name="Show Methods GitHub">
<kw name="Should StackQL Novel Exec Equal">
<arg>${SHOW_METHODS_GITHUB_REPOS_REPOS}</arg>
<arg>${SHOW_METHODS_GITHUB_REPOS_REPOS_EXPECTED}</arg>
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:24:37.677" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:37.677" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:37.677" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:37.678" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show methods in github.repos.repos;"</msg>
<msg timestamp="20220719 22:24:37.689" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:38.117" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:38.117" level="INFO">|----------------------------------|--------------------------------|---------|
|            MethodName            |         RequiredParams         | SQLVerb |
|----------------------------------|--------------------------------|---------|
| get                              | owner, repo                    | SELECT  |
|----------------------------------|--------------------------------|---------|
| list_for_authenticated_user      |                                | SELECT  |
|----------------------------------|--------------------------------|---------|
| list_for_org                     | org                            | SELECT  |
|----------------------------------|--------------------------------|---------|
| list_for_user                    | username                       | SELECT  |
|----------------------------------|--------------------------------|---------|
| create_for_authenticated_user    | data__name                     | INSERT  |
|----------------------------------|--------------------------------|---------|
| create_in_org                    | org, data__name                | INSERT  |
|----------------------------------|--------------------------------|---------|
| create_using_template            | template_owner, template_repo, | INSERT  |
|                                  | data__name                     |         |
|----------------------------------|--------------------------------|---------|
| delete                           | owner, repo                    | DELETE  |
|----------------------------------|--------------------------------|---------|
| check_vulnerability_alerts       | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|
| codeowners_errors                | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|
| create_dispatch_event            | owner, repo, data__event_type  | EXEC    |
|----------------------------------|--------------------------------|---------|
| disable_automated_security_fixes | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|
| disable_vulnerability_alerts     | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|
| enable_automated_security_fixes  | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|
| enable_vulnerability_alerts      | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|
| transfer                         | owner, repo, data__new_owner   | EXEC    |
|----------------------------------|--------------------------------|---------|
| update                           | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|</msg>
<msg timestamp="20220719 22:24:38.117" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:37.674" endtime="20220719 22:24:38.117"/>
</kw>
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_CANONICAL_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:24:38.119" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:38.119" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:38.119" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:38.119" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry\", \"verifyConfig\": {\"nopVerify\": false}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show methods in github.repos.repos;"</msg>
<msg timestamp="20220719 22:24:38.127" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:38.477" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:38.477" level="INFO">|----------------------------------|--------------------------------|---------|
|            MethodName            |         RequiredParams         | SQLVerb |
|----------------------------------|--------------------------------|---------|
| get                              | owner, repo                    | SELECT  |
|----------------------------------|--------------------------------|---------|
| list_for_authenticated_user      |                                | SELECT  |
|----------------------------------|--------------------------------|---------|
| list_for_org                     | org                            | SELECT  |
|----------------------------------|--------------------------------|---------|
| list_for_user                    | username                       | SELECT  |
|----------------------------------|--------------------------------|---------|
| create_for_authenticated_user    | data__name                     | INSERT  |
|----------------------------------|--------------------------------|---------|
| create_in_org                    | org, data__name                | INSERT  |
|----------------------------------|--------------------------------|---------|
| create_using_template            | template_owner, template_repo, | INSERT  |
|                                  | data__name                     |         |
|----------------------------------|--------------------------------|---------|
| delete                           | owner, repo                    | DELETE  |
|----------------------------------|--------------------------------|---------|
| check_vulnerability_alerts       | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|
| codeowners_errors                | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|
| create_dispatch_event            | owner, repo, data__event_type  | EXEC    |
|----------------------------------|--------------------------------|---------|
| disable_automated_security_fixes | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|
| disable_vulnerability_alerts     | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|
| enable_automated_security_fixes  | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|
| enable_vulnerability_alerts      | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|
| transfer                         | owner, repo, data__new_owner   | EXEC    |
|----------------------------------|--------------------------------|---------|
| update                           | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|</msg>
<msg timestamp="20220719 22:24:38.477" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:38.118" endtime="20220719 22:24:38.477"/>
</kw>
<status status="PASS" starttime="20220719 22:24:37.673" endtime="20220719 22:24:38.478"/>
</kw>
<status status="PASS" starttime="20220719 22:24:37.671" endtime="20220719 22:24:38.479"/>
</test>
<status status="PASS" starttime="20220719 22:24:34.788" endtime="20220719 22:24:38.482"/>
</suite>
<suite id="s1-s2" name="Stackql Mocked From Cmd Line" source="/Users/admin/stackql/stackql-devel/test/robot/functional/stackql_mocked_from_cmd_line.robot">
<test id="s1-s2-t1" name="Google Container Agg Desc">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_CONTAINER_SUBNET_AGG_DESC}</arg>
<arg>${SELECT_CONTAINER_SUBNET_AGG_DESC_EXPECTED}</arg>
<msg timestamp="20220719 22:24:38.511" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:38.511" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:38.511" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:38.512" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select ipCidrRange, sum(5) cc  from  google.container.`projects.aggregated.usableSubnetworks` where projectsId = 'testing-project' group by \"ipCidrRange\" having sum(5) &gt;= 5 order by ipCidrRange desc;"</msg>
<msg timestamp="20220719 22:24:38.522" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:41.346" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:41.346" level="INFO">|-------------|----|
| ipCidrRange | cc |
|-------------|----|
| 10.0.1.0/24 |  5 |
|-------------|----|
| 10.0.0.0/24 |  5 |
|-------------|----|</msg>
<msg timestamp="20220719 22:24:41.346" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:38.509" endtime="20220719 22:24:41.347"/>
</kw>
<status status="PASS" starttime="20220719 22:24:38.508" endtime="20220719 22:24:41.351"/>
</test>
<test id="s1-s2-t2" name="Google Container Agg Asc">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_CONTAINER_SUBNET_AGG_ASC}</arg>
<arg>${SELECT_CONTAINER_SUBNET_AGG_ASC_EXPECTED}</arg>
<msg timestamp="20220719 22:24:41.357" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:41.357" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:41.357" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:41.357" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select ipCidrRange, sum(5) cc  from  google.container.`projects.aggregated.usableSubnetworks` where projectsId = 'testing-project' group by \"ipCidrRange\" having sum(5) &gt;= 5 order by ipCidrRange asc;"</msg>
<msg timestamp="20220719 22:24:41.373" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:41.607" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:41.608" level="INFO">|-------------|----|
| ipCidrRange | cc |
|-------------|----|
| 10.0.0.0/24 |  5 |
|-------------|----|
| 10.0.1.0/24 |  5 |
|-------------|----|</msg>
<msg timestamp="20220719 22:24:41.608" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:41.354" endtime="20220719 22:24:41.608"/>
</kw>
<status status="PASS" starttime="20220719 22:24:41.352" endtime="20220719 22:24:41.609"/>
</test>
<test id="s1-s2-t3" name="Google IAM Policy Agg">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>\-\-infile\=${GET_IAM_POLICY_AGG_ASC_INPUT_FILE}</arg>
<arg>${GET_IAM_POLICY_AGG_ASC_EXPECTED}</arg>
<arg>\-o\=csv</arg>
<msg timestamp="20220719 22:24:41.612" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:41.612" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:41.612" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:41.613" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true --infile=/Users/admin/stackql/stackql-devel/test/assets/input/select-exec-dependent-org-iam-policy.iql -o=csv</msg>
<msg timestamp="20220719 22:24:41.620" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:41.779" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:41.780" level="INFO">members,roles
"[""user:joeblow@myoutfit.com"",""user:somejimbo@gmail.com""]","roles/owner,roles/resourcemanager.folderAdmin,roles/resourcemanager.organizationAdmin"
"[""user:joeblow@myoutfit.com""]","roles/billing.admin,roles/compute.networkUser,roles/compute.xpnAdmin,roles/container.clusterAdmin,roles/orgpolicy.policyAdmin,roles/resourcemanager.projectCreator"</msg>
<msg timestamp="20220719 22:24:41.780" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:41.611" endtime="20220719 22:24:41.780"/>
</kw>
<status status="PASS" starttime="20220719 22:24:41.610" endtime="20220719 22:24:41.781"/>
</test>
<test id="s1-s2-t4" name="Google Select Project IAM Policy">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_EXPERIMENTAL_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GOOGLE_CLOUDRESOURCEMANAGER_IAMPOLICY}</arg>
<arg>${SELECT_GOOGLE_CLOUDRESOURCEMANAGER_IAMPOLICY_EXPECTED}</arg>
<msg timestamp="20220719 22:24:41.785" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:41.785" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:41.785" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:41.785" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-advanced\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-advanced\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "SELECT role, members, condition from google.cloudresourcemanager.project_iam_policies where projectsId = 'testproject' order by role asc;"</msg>
<msg timestamp="20220719 22:24:41.794" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:41.979" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:41.979" level="INFO">|--------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
|                 role                 |                                                               members                                                                | condition |
|--------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
| roles/appengine.serviceAgent         | ["serviceAccount:service-1231231231230@gcp-gae-service.iam.gserviceaccount.com"]                                                     | null      |
|--------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
| roles/cloudbuild.builds.builder      | ["serviceAccount:1231231231230@cloudbuild.gserviceaccount.com"]                                                                      | null      |
|--------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
| roles/cloudbuild.serviceAgent        | ["serviceAccount:service-1231231231230@gcp-sa-cloudbuild.iam.gserviceaccount.com"]                                                   | null      |
|--------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
| roles/containerregistry.ServiceAgent | ["serviceAccount:service-1231231231230@containerregistry.iam.gserviceaccount.com"]                                                   | null      |
|--------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
| roles/editor                         | ["serviceAccount:testproject@appspot.gserviceaccount.com"]                                                                           | null      |
|--------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
| roles/firebaserules.system           | ["serviceAccount:service-1231231231230@firebase-rules.iam.gserviceaccount.com"]                                                      | null      |
|--------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
| roles/firestore.serviceAgent         | ["serviceAccount:service-1231231231230@gcp-sa-firestore.iam.gserviceaccount.com"]                                                    | null      |
|--------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
| roles/owner                          | ["serviceAccount:testproject-provisioner@testproject.iam.gserviceaccount.com","user:joeblow@testorg.io","user:johnsmith@testorg.io"] | null      |
|--------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
| roles/pubsub.serviceAgent            | ["serviceAccount:service-1231231231230@gcp-sa-pubsub.iam.gserviceaccount.com"]                                                       | null      |
|--------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|</msg>
<msg timestamp="20220719 22:24:41.980" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:41.784" endtime="20220719 22:24:41.980"/>
</kw>
<status status="PASS" starttime="20220719 22:24:41.782" endtime="20220719 22:24:41.981"/>
</test>
<test id="s1-s2-t5" name="Google Select Project IAM Policy Filtered And Verify Like Filtering">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_EXPERIMENTAL_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GOOGLE_CLOUDRESOURCEMANAGER_IAMPOLICY_LIKE_FILTERED}</arg>
<arg>${SELECT_GOOGLE_CLOUDRESOURCEMANAGER_IAMPOLICY_FILTERED_EXPECTED}</arg>
<msg timestamp="20220719 22:24:41.985" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:41.985" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:41.985" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:41.986" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-advanced\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-advanced\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "SELECT role, members, condition from google.cloudresourcemanager.project_iam_policies where projectsId = 'testproject' and role like '%owner' order by role asc;"</msg>
<msg timestamp="20220719 22:24:41.992" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:42.211" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:42.211" level="INFO">|-------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
|    role     |                                                               members                                                                | condition |
|-------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
| roles/owner | ["serviceAccount:testproject-provisioner@testproject.iam.gserviceaccount.com","user:joeblow@testorg.io","user:johnsmith@testorg.io"] | null      |
|-------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|</msg>
<msg timestamp="20220719 22:24:42.211" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:41.983" endtime="20220719 22:24:42.212"/>
</kw>
<status status="PASS" starttime="20220719 22:24:41.982" endtime="20220719 22:24:42.213"/>
</test>
<test id="s1-s2-t6" name="Google Select Project IAM Policy Filtered And Verify Where Filtering">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_EXPERIMENTAL_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GOOGLE_CLOUDRESOURCEMANAGER_IAMPOLICY_COMPARISON_FILTERED}</arg>
<arg>${SELECT_GOOGLE_CLOUDRESOURCEMANAGER_IAMPOLICY_FILTERED_EXPECTED}</arg>
<msg timestamp="20220719 22:24:42.219" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:42.219" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:42.219" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:42.219" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-advanced\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-advanced\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "SELECT role, members, condition from google.cloudresourcemanager.project_iam_policies where projectsId = 'testproject' and role = 'roles/owner' order by role asc;"</msg>
<msg timestamp="20220719 22:24:42.227" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:42.411" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:42.411" level="INFO">|-------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
|    role     |                                                               members                                                                | condition |
|-------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
| roles/owner | ["serviceAccount:testproject-provisioner@testproject.iam.gserviceaccount.com","user:joeblow@testorg.io","user:johnsmith@testorg.io"] | null      |
|-------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|</msg>
<msg timestamp="20220719 22:24:42.412" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:42.215" endtime="20220719 22:24:42.412"/>
</kw>
<status status="PASS" starttime="20220719 22:24:42.214" endtime="20220719 22:24:42.413"/>
</test>
<test id="s1-s2-t7" name="Google Join Plus String Concatenated Select Expressions">
<kw name="Should Horrid Query Stackql Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GOOGLE_JOIN_CONCATENATED_SELECT_EXPRESSIONS}</arg>
<arg>${SELECT_GOOGLE_JOIN_CONCATENATED_SELECT_EXPRESSIONS_EXPECTED}</arg>
<arg>/Users/admin/stackql/stackql-devel/test/robot/functional/tmp/Google-Join-Plus-String-Concatenated-Select-Expressions.tmp</arg>
<msg timestamp="20220719 22:24:42.417" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:42.417" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:42.417" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:42.419" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "SELECT i.zone, i.name, i.machineType, i.deletionProtection, '[{\"subnetwork\":\"' || JSON_EXTRACT(i.networkInterfaces, '$[0].subnetwork') || '\"}]', '[{\"boot\": true, \"initializeParams\": { \"diskSizeGb\": \"' || JSON_EXTRACT(i.disks, '$[0].diskSizeGb') || '\", \"sourceImage\": \"' || d.sourceImage || '\"}}]', i.labels FROM google.compute.instances i INNER JOIN google.compute.disks d ON i.name = d.name WHERE i.project = 'testing-project' AND i.zone = 'australia-southeast1-a' AND d.project = 'testing-project' AND d.zone = 'australia-southeast1-a' AND i.name LIKE '%' order by i.name DESC;"</msg>
<msg timestamp="20220719 22:24:42.427" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:43.798" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:43.799" level="INFO">|---------------------------------------------------------------------------------------------|--------------|--------------------------------------------------------------------------------------------------------------------|--------------------|----------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------|----------------------------------------------------|
|                                            zone                                             |     name     |                                                    machineType                                                     | deletionProtection |                                                                    col_1                                                                     |                                                     col_2                                                     |                       labels                       |
|---------------------------------------------------------------------------------------------|--------------|--------------------------------------------------------------------------------------------------------------------|--------------------|----------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------|----------------------------------------------------|
| https://www.googleapis.com/compute/v1/projects/testing-project/zones/australia-southeast1-a | instance-1-c | https://www.googleapis.com/compute/v1/projects/testing-project/zones/australia-southeast1-a/machineTypes/e2-medium | false              | [{"subnetwork":"https://www.googleapis.com/compute/v1/projects/testing-project/regions/australia-southeast1/subnetworks/my-disk-01-indeed"}] | [{"boot": true, "initializeParams": { "diskSizeGb": "10", "sourceImage":                                      | null                                               |
|                                                                                             |              |                                                                                                                    |                    |                                                                                                                                              | "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2004-focal-v20220610"}}] |                                                    |
|---------------------------------------------------------------------------------------------|--------------|--------------------------------------------------------------------------------------------------------------------|--------------------|----------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------|----------------------------------------------------|
| https://www.googleapis.com/compute/v1/projects/testing-project/zones/australia-southeast1-a | instance-1-b | https://www.googleapis.com/compute/v1/projects/testing-project/zones/australia-southeast1-a/machineTypes/e2-medium | false              | [{"subnetwork":"https://www.googleapis.com/compute/v1/projects/testing-project/regions/australia-southeast1/subnetworks/my-disk-01-indeed"}] | [{"boot": true, "initializeParams": { "diskSizeGb": "10", "sourceImage":                                      | {"sha":"219001a1ecac6c17e8e3a45f7c9182341e4cf71b"} |
|                                                                                             |              |                                                                                                                    |                    |                                                                                                                                              | "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2004-focal-v20220610"}}] |                                                    |
|---------------------------------------------------------------------------------------------|--------------|--------------------------------------------------------------------------------------------------------------------|--------------------|----------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------|----------------------------------------------------|
| https://www.googleapis.com/compute/v1/projects/testing-project/zones/australia-southeast1-a | instance-1   | https://www.googleapis.com/compute/v1/projects/testing-project/zones/australia-southeast1-a/machineTypes/e2-medium | false              | [{"subnetwork":"https://www.googleapis.com/compute/v1/projects/testing-project/regions/australia-southeast1/subnetworks/my-disk-01-indeed"}] | [{"boot": true, "initializeParams": { "diskSizeGb": "10", "sourceImage":                                      | {"sha":"8d5dc38ef71f6249f7090947bb444ace3d5682c3"} |
|                                                                                             |              |                                                                                                                    |                    |                                                                                                                                              | "https://www.googleapis.com/compute/v1/projects/debian-cloud/global/images/debian-11-bullseye-v20220519"}}]   |                                                    |
|---------------------------------------------------------------------------------------------|--------------|--------------------------------------------------------------------------------------------------------------------|--------------------|----------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------|----------------------------------------------------|</msg>
<msg timestamp="20220719 22:24:43.799" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:42.414" endtime="20220719 22:24:43.799"/>
</kw>
<status status="PASS" starttime="20220719 22:24:42.413" endtime="20220719 22:24:43.801"/>
</test>
<test id="s1-s2-t8" name="Google AcceleratorTypes SQL verb pre changeover">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_ACCELERATOR_TYPES_DESC}</arg>
<arg>${SELECT_ACCELERATOR_TYPES_DESC_EXPECTED}</arg>
<msg timestamp="20220719 22:24:43.805" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:43.805" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:43.806" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:43.806" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select  kind, name  from  google.compute.acceleratorTypes where project = 'testing-project' and zone = 'australia-southeast1-a' order by name desc;"</msg>
<msg timestamp="20220719 22:24:43.818" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:44.646" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:44.646" level="INFO">|-------------------------|---------------------|
|          kind           |        name         |
|-------------------------|---------------------|
| compute#acceleratorType | nvidia-tesla-t4-vws |
|-------------------------|---------------------|
| compute#acceleratorType | nvidia-tesla-t4     |
|-------------------------|---------------------|
| compute#acceleratorType | nvidia-tesla-p4-vws |
|-------------------------|---------------------|
| compute#acceleratorType | nvidia-tesla-p4     |
|-------------------------|---------------------|</msg>
<msg timestamp="20220719 22:24:44.646" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:43.803" endtime="20220719 22:24:44.647"/>
</kw>
<status status="PASS" starttime="20220719 22:24:43.802" endtime="20220719 22:24:44.648"/>
</test>
<test id="s1-s2-t9" name="Google Machine Types Select Paginated">
<kw name="Should Horrid Query Stackql Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_MACHINE_TYPES_DESC}</arg>
<arg>${SELECT_MACHINE_TYPES_DESC_EXPECTED}</arg>
<arg>/Users/admin/stackql/stackql-devel/test/robot/functional/tmp/Google-Machine-Types-Select-Paginated.tmp</arg>
<msg timestamp="20220719 22:24:44.651" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:44.651" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:44.651" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:44.653" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select name from google.compute.machineTypes where project = 'testing-project' and zone = 'australia-southeast1-a' order by name desc;"</msg>
<msg timestamp="20220719 22:24:44.659" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:46.852" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:46.852" level="INFO">|--------------------|
|        name        |
|--------------------|
| p9-c2-standard-8   |
|--------------------|
| p9-c2-standard-60  |
|--------------------|
| p9-c2-standard-4   |
|--------------------|
| p9-c2-standard-30  |
|--------------------|
| p9-c2-standard-16  |
|--------------------|
| p8-c2-standard-8   |
|--------------------|
| p8-c2-standard-60  |
|--------------------|
| p8-c2-standard-4   |
|--------------------|
| p8-c2-standard-30  |
|--------------------|
| p8-c2-standard-16  |
|--------------------|
| p7-c2-standard-8   |
|--------------------|
| p7-c2-standard-60  |
|--------------------|
| p7-c2-standard-4   |
|--------------------|
| p7-c2-standard-30  |
|--------------------|
| p7-c2-standard-16  |
|--------------------|
| p6-c2-standard-8   |
|--------------------|
| p6-c2-standard-60  |
|--------------------|
| p6-c2-standard-4   |
|--------------------|
| p6-c2-standard-30  |
|--------------------|
| p6-c2-standard-16  |
|--------------------|
| p5-c2-standard-8   |
|--------------------|
| p5-c2-standard-60  |
|--------------------|
| p5-c2-standard-4   |
|--------------------|
| p5-c2-standard-30  |
|--------------------|
| p5-c2-standard-16  |
|--------------------|
| p4-c2-standard-8   |
|--------------------|
| p4-c2-standard-60  |
|--------------------|
| p4-c2-standard-4   |
|--------------------|
| p4-c2-standard-30  |
|--------------------|
| p4-c2-standard-16  |
|--------------------|
| p3-c2-standard-8   |
|--------------------|
| p3-c2-standard-60  |
|--------------------|
| p3-c2-standard-4   |
|--------------------|
| p3-c2-standard-30  |
|--------------------|
| p3-c2-standard-16  |
|--------------------|
| p20-c2-standard-8  |
|--------------------|
| p20-c2-standard-60 |
|--------------------|
| p20-c2-standard-4  |
|--------------------|
| p20-c2-standard-30 |
|--------------------|
| p20-c2-standard-16 |
|--------------------|
| p2-c2-standard-8   |
|--------------------|
| p2-c2-standard-60  |
|--------------------|
| p2-c2-standard-4   |
|--------------------|
| p2-c2-standard-30  |
|--------------------|
| p2-c2-standard-16  |
|--------------------|
| p19-c2-standard-8  |
|--------------------|
| p19-c2-standard-60 |
|--------------------|
| p19-c2-standard-4  |
|--------------------|
| p19-c2-standard-30 |
|--------------------|
| p19-c2-standard-16 |
|--------------------|
| p18-c2-standard-8  |
|--------------------|
| p18-c2-standard-60 |
|--------------------|
| p18-c2-standard-4  |
|--------------------|
| p18-c2-standard-30 |
|--------------------|
| p18-c2-standard-16 |
|--------------------|
| p17-c2-standard-8  |
|--------------------|
| p17-c2-standard-60 |
|--------------------|
| p17-c2-standard-4  |
|--------------------|
| p17-c2-standard-30 |
|--------------------|
| p17-c2-standard-16 |
|--------------------|
| p16-c2-standard-8  |
|--------------------|
| p16-c2-standard-60 |
|--------------------|
| p16-c2-standard-4  |
|--------------------|
| p16-c2-standard-30 |
|--------------------|
| p16-c2-standard-16 |
|--------------------|
| p15-c2-standard-8  |
|--------------------|
| p15-c2-standard-60 |
|--------------------|
| p15-c2-standard-4  |
|--------------------|
| p15-c2-standard-30 |
|--------------------|
| p15-c2-standard-16 |
|--------------------|
| p14-c2-standard-8  |
|--------------------|
| p14-c2-standard-60 |
|--------------------|
| p14-c2-standard-4  |
|--------------------|
| p14-c2-standard-30 |
|--------------------|
| p14-c2-standard-16 |
|--------------------|
| p13-c2-standard-8  |
|--------------------|
| p13-c2-standard-60 |
|--------------------|
| p13-c2-standard-4  |
|--------------------|
| p13-c2-standard-30 |
|--------------------|
| p13-c2-standard-16 |
|--------------------|
| p12-c2-standard-8  |
|--------------------|
| p12-c2-standard-60 |
|--------------------|
| p12-c2-standard-4  |
|--------------------|
| p12-c2-standard-30 |
|--------------------|
| p12-c2-standard-16 |
|--------------------|
| p11-c2-standard-8  |
|--------------------|
| p11-c2-standard-60 |
|--------------------|
| p11-c2-standard-4  |
|--------------------|
| p11-c2-standard-30 |
|--------------------|
| p11-c2-standard-16 |
|--------------------|
| p10-c2-standard-8  |
|--------------------|
| p10-c2-standard-60 |
|--------------------|
| p10-c2-standard-4  |
|--------------------|
| p10-c2-standard-30 |
|--------------------|
| p10-c2-standard-16 |
|--------------------|
| p1-c2-standard-8   |
|--------------------|
| p1-c2-standard-60  |
|--------------------|
| p1-c2-standard-4   |
|--------------------|
| p1-c2-standard-30  |
|--------------------|
| p1-c2-standard-16  |
|--------------------|</msg>
<msg timestamp="20220719 22:24:46.852" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:44.650" endtime="20220719 22:24:46.853"/>
</kw>
<status status="PASS" starttime="20220719 22:24:44.649" endtime="20220719 22:24:46.855"/>
</test>
<test id="s1-s2-t10" name="Google AcceleratorTypes SQL verb post changeover">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_SQL_VERB_CONTRIVED_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_ACCELERATOR_TYPES_DESC}</arg>
<arg>${SELECT_ACCELERATOR_TYPES_DESC_EXPECTED}</arg>
<msg timestamp="20220719 22:24:46.859" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:46.859" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:46.859" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:46.859" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry\", \"srcPrefix\": \"registry-verb-matching-src\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select  kind, name  from  google.compute.acceleratorTypes where project = 'testing-project' and zone = 'australia-southeast1-a' order by name desc;"</msg>
<msg timestamp="20220719 22:24:46.866" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:47.638" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:47.639" level="INFO">|-------------------------|---------------------|
|          kind           |        name         |
|-------------------------|---------------------|
| compute#acceleratorType | nvidia-tesla-t4-vws |
|-------------------------|---------------------|
| compute#acceleratorType | nvidia-tesla-t4     |
|-------------------------|---------------------|
| compute#acceleratorType | nvidia-tesla-p4-vws |
|-------------------------|---------------------|
| compute#acceleratorType | nvidia-tesla-p4     |
|-------------------------|---------------------|</msg>
<msg timestamp="20220719 22:24:47.639" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:46.857" endtime="20220719 22:24:47.639"/>
</kw>
<status status="PASS" starttime="20220719 22:24:46.856" endtime="20220719 22:24:47.640"/>
</test>
<test id="s1-s2-t11" name="Okta Apps Select Simple">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_OKTA_APPS}</arg>
<arg>${SELECT_OKTA_APPS_ASC_EXPECTED}</arg>
<msg timestamp="20220719 22:24:47.642" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:47.643" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:47.643" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:47.643" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select name, status, label, id from okta.application.apps apps where apps.subdomain = 'example-subdomain' order by name asc;"</msg>
<msg timestamp="20220719 22:24:47.649" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:49.318" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:49.319" level="INFO">|---------------------|----------|---------------------|----------------------|
|        name         |  status  |        label        |          id          |
|---------------------|----------|---------------------|----------------------|
| oidc_client         | ACTIVE   | demo-disk-xx4       | 0oa3fwm4zsW5jR5V55d7 |
|---------------------|----------|---------------------|----------------------|
| okta_browser_plugin | ACTIVE   | Okta Browser Plugin | 0oa3cy8k83is5uMwh5d7 |
|---------------------|----------|---------------------|----------------------|
| okta_enduser        | ACTIVE   | Okta Dashboard      | 0oa3cy8k8zaX4fKl15d7 |
|---------------------|----------|---------------------|----------------------|
| saasure             | ACTIVE   | Okta Admin Console  | 0oa3cy8k41YM15j4H5d7 |
|---------------------|----------|---------------------|----------------------|
| template_basic_auth | INACTIVE | demo-disk-xx5       | 0oa3pssr5jYavmnNF5d7 |
|---------------------|----------|---------------------|----------------------|</msg>
<msg timestamp="20220719 22:24:49.319" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:47.641" endtime="20220719 22:24:49.319"/>
</kw>
<status status="PASS" starttime="20220719 22:24:47.640" endtime="20220719 22:24:49.320"/>
</test>
<test id="s1-s2-t12" name="AWS Volumes Select Simple">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_AWS_VOLUMES}</arg>
<arg>${SELECT_AWS_VOLUMES_ASC_EXPECTED}</arg>
<msg timestamp="20220719 22:24:49.325" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:49.325" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:49.325" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:49.326" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select VolumeId, Encrypted, Size from aws.ec2.volumes where region = 'ap-southeast-1' order by VolumeId asc;"</msg>
<msg timestamp="20220719 22:24:49.339" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:52.910" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:52.910" level="INFO">|-----------------------|-----------|------|
|       VolumeId        | Encrypted | Size |
|-----------------------|-----------|------|
| vol-00100000000000000 | false     |   10 |
|-----------------------|-----------|------|
| vol-00200000000000000 | false     |    8 |
|-----------------------|-----------|------|</msg>
<msg timestamp="20220719 22:24:52.910" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:49.322" endtime="20220719 22:24:52.910"/>
</kw>
<status status="PASS" starttime="20220719 22:24:49.321" endtime="20220719 22:24:52.911"/>
</test>
<test id="s1-s2-t13" name="AWS Volume Insert Simple">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${CREATE_AWS_VOLUME}</arg>
<arg>The operation completed successfully</arg>
<msg timestamp="20220719 22:24:52.914" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:52.914" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:52.914" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:52.914" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "insert into aws.ec2.volumes(AvailabilityZone, Size, region) select 'ap-southeast-1a', 10, 'ap-southeast-1';"</msg>
<msg timestamp="20220719 22:24:52.921" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:55.032" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:55.032" level="INFO">The operation completed successfully</msg>
<msg timestamp="20220719 22:24:55.032" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:52.913" endtime="20220719 22:24:55.033"/>
</kw>
<status status="PASS" starttime="20220719 22:24:52.912" endtime="20220719 22:24:55.034"/>
</test>
<test id="s1-s2-t14" name="GitHub Pages Select Top Level Object">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GITHUB_REPOS_PAGES_SINGLE}</arg>
<arg>${SELECT_GITHUB_REPOS_PAGES_SINGLE_EXPECTED}</arg>
<msg timestamp="20220719 22:24:55.038" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:55.039" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:55.039" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:55.039" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select url from github.repos.pages where owner = 'dummyorg' and repo = 'dummyapp.io';"</msg>
<msg timestamp="20220719 22:24:55.049" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:57.512" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:57.512" level="INFO">|---------------------------------------------------------|
|                           url                           |
|---------------------------------------------------------|
| https://api.github.com/repos/dummyorg/dummyapp.io/pages |
|---------------------------------------------------------|</msg>
<msg timestamp="20220719 22:24:57.512" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:55.037" endtime="20220719 22:24:57.513"/>
</kw>
<status status="PASS" starttime="20220719 22:24:55.035" endtime="20220719 22:24:57.513"/>
</test>
<test id="s1-s2-t15" name="GitHub Scim Users Select">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GITHUB_SCIM_USERS}</arg>
<arg>${SELECT_GITHUB_SCIM_USERS_EXPECTED}</arg>
<msg timestamp="20220719 22:24:57.517" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:57.518" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:57.518" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:57.519" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select JSON_EXTRACT(name, '$.givenName') || ' ' || JSON_EXTRACT(name, '$.familyName') as name, userName, externalId, id from github.scim.users where org = 'dummyorg' order by id asc;"</msg>
<msg timestamp="20220719 22:24:57.530" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:57.671" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:57.671" level="INFO">|--------------|----------------------|----------------------|--------------------------------------|
|     name     |       userName       |      externalId      |                  id                  |
|--------------|----------------------|----------------------|--------------------------------------|
| Mona Octocat | octocat@github.com   | 00u1dhhb1fkIGP7RL1d8 | 5fc0c238-1112-11e8-8e45-920c87bdbd75 |
|--------------|----------------------|----------------------|--------------------------------------|
| Crazy Dude   | crazydude@github.com | 00u1dhhb1fkIGP7RL1d9 | 5fc0c238-1112-11e8-8e45-920c87bdbd76 |
|--------------|----------------------|----------------------|--------------------------------------|</msg>
<msg timestamp="20220719 22:24:57.672" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:57.516" endtime="20220719 22:24:57.672"/>
</kw>
<status status="PASS" starttime="20220719 22:24:57.515" endtime="20220719 22:24:57.673"/>
</test>
<test id="s1-s2-t16" name="GitHub Branch Names Paginated Select">
<kw name="Should Horrid Query Stackql Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GITHUB_BRANCHES_NAMES_DESC}</arg>
<arg>${SELECT_GITHUB_BRANCHES_NAMES_DESC_EXPECTED}</arg>
<arg>/Users/admin/stackql/stackql-devel/test/robot/functional/tmp/GitHub-Branch-Names-Paginated-Select.tmp</arg>
<msg timestamp="20220719 22:24:57.677" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:57.677" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:57.677" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:57.678" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select name from github.repos.branches where owner = 'dummyorg' and repo = 'dummyapp.io' order by name desc;"</msg>
<msg timestamp="20220719 22:24:57.686" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:24:58.570" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:24:58.571" level="INFO">|------------------------------|
|             name             |
|------------------------------|
| feature/flow-control-rebased |
|------------------------------|
| feature/flow-control         |
|------------------------------|
| bugfix/select-schema-default |
|------------------------------|
| bugfix/nil-check             |
|------------------------------|</msg>
<msg timestamp="20220719 22:24:58.571" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:57.676" endtime="20220719 22:24:58.572"/>
</kw>
<status status="PASS" starttime="20220719 22:24:57.674" endtime="20220719 22:24:58.573"/>
</test>
<test id="s1-s2-t17" name="GitHub Tags Paginated Count">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GITHUB_TAGS_COUNT}</arg>
<arg>${SELECT_GITHUB_TAGS_COUNT_EXPECTED}</arg>
<msg timestamp="20220719 22:24:58.576" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:24:58.576" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:24:58.576" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:24:58.577" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select count(*) as ct from github.repos.tags where owner = 'dummyorg' and repo = 'dummyapp.io';"</msg>
<msg timestamp="20220719 22:24:58.584" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:25:01.394" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:25:01.394" level="INFO">|-----|
| ct  |
|-----|
| 600 |
|-----|</msg>
<msg timestamp="20220719 22:25:01.394" level="INFO"/>
<status status="PASS" starttime="20220719 22:24:58.575" endtime="20220719 22:25:01.395"/>
</kw>
<status status="PASS" starttime="20220719 22:24:58.574" endtime="20220719 22:25:01.396"/>
</test>
<test id="s1-s2-t18" name="GitHub Repository IDs Select">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GITHUB_REPOS_IDS_ASC}</arg>
<arg>${SELECT_GITHUB_REPOS_IDS_ASC_EXPECTED}</arg>
<msg timestamp="20220719 22:25:01.400" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:25:01.400" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:25:01.400" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:25:01.401" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select id from github.repos.repos where org = 'dummyorg' order by id ASC;"</msg>
<msg timestamp="20220719 22:25:01.411" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:25:01.779" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:25:01.780" level="INFO">|-----------|
|    id     |
|-----------|
| 100000001 |
|-----------|
| 100000002 |
|-----------|
| 100000003 |
|-----------|</msg>
<msg timestamp="20220719 22:25:01.780" level="INFO"/>
<status status="PASS" starttime="20220719 22:25:01.398" endtime="20220719 22:25:01.780"/>
</kw>
<status status="PASS" starttime="20220719 22:25:01.397" endtime="20220719 22:25:01.782"/>
</test>
<test id="s1-s2-t19" name="Filter on Implicit Selectable Object">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GITHUB_REPOS_FILTERED_SINGLE}</arg>
<arg>${SELECT_GITHUB_REPOS_FILTERED_SINGLE_EXPECTED}</arg>
<msg timestamp="20220719 22:25:01.785" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:25:01.785" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:25:01.785" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:25:01.787" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select id, name from github.repos.repos where org = 'dummyorg' and name = 'dummyapp.io';"</msg>
<msg timestamp="20220719 22:25:01.797" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:25:02.139" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:25:02.139" level="INFO">|-----------|-------------|
|    id     |    name     |
|-----------|-------------|
| 100000002 | dummyapp.io |
|-----------|-------------|</msg>
<msg timestamp="20220719 22:25:02.139" level="INFO"/>
<status status="PASS" starttime="20220719 22:25:01.784" endtime="20220719 22:25:02.140"/>
</kw>
<status status="PASS" starttime="20220719 22:25:01.783" endtime="20220719 22:25:02.141"/>
</test>
<test id="s1-s2-t20" name="Join GCP Okta Cross Provider">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_CONTRIVED_GCP_OKTA_JOIN}</arg>
<arg>${SELECT_CONTRIVED_GCP_OKTA_JOIN_EXPECTED}</arg>
<msg timestamp="20220719 22:25:02.145" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:25:02.145" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:25:02.145" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:25:02.146" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select d1.name, d1.id, d2.name as d2_name, d2.status, d2.label, d2.id as d2_id from google.compute.disks d1 inner join okta.application.apps d2 on d1.name = d2.label where d1.project = 'testing-project' and d1.zone = 'australia-southeast1-b' and d2.subdomain = 'dev-79923018-admin' order by d1.name ASC;"</msg>
<msg timestamp="20220719 22:25:02.161" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:25:02.794" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:25:02.794" level="INFO">|---------------|---------------------|---------------------|----------|---------------|----------------------|
|     name      |         id          |       d2_name       |  status  |     label     |        d2_id         |
|---------------|---------------------|---------------------|----------|---------------|----------------------|
| demo-disk-xx4 | 3236826943903762399 | oidc_client         | ACTIVE   | demo-disk-xx4 | 0oa3fwm4zsW5jR5V55d7 |
|---------------|---------------------|---------------------|----------|---------------|----------------------|
| demo-disk-xx5 | 3236826943903762400 | template_basic_auth | INACTIVE | demo-disk-xx5 | 0oa3pssr5jYavmnNF5d7 |
|---------------|---------------------|---------------------|----------|---------------|----------------------|</msg>
<msg timestamp="20220719 22:25:02.794" level="INFO"/>
<status status="PASS" starttime="20220719 22:25:02.143" endtime="20220719 22:25:02.795"/>
</kw>
<status status="PASS" starttime="20220719 22:25:02.141" endtime="20220719 22:25:02.796"/>
</test>
<test id="s1-s2-t21" name="Join GCP Okta Cross Provider JSON Dependent Keyword in Table Name">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_CONTRIVED_GCP_GITHUB_JSON_DEPENDENT_JOIN}</arg>
<arg>${SELECT_CONTRIVED_GCP_GITHUB_JSON_DEPENDENT_JOIN_EXPECTED}</arg>
<msg timestamp="20220719 22:25:02.802" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:25:02.802" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:25:02.803" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:25:02.804" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "SELECT i.name as instance_name, i.status as instance_status, c.sha as commit_sha, JSON_EXTRACT(c.commit, '$.author.email') as author_email, DATE(JSON_EXTRACT(c.commit, '$.author.date')) as commit_date FROM github.repos.commits c INNER JOIN google.compute.instances i ON JSON_EXTRACT(i.labels, '$.sha') = c.sha WHERE c.owner = 'dummyorg' AND c.repo = 'dummyapp.io' AND i.project = 'testing-project' AND i.zone = 'australia-southeast1-a';"</msg>
<msg timestamp="20220719 22:25:02.818" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:25:04.205" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:25:04.205" level="INFO">|---------------|-----------------|------------------------------------------|---------------------|-------------|
| instance_name | instance_status |                commit_sha                |    author_email     | commit_date |
|---------------|-----------------|------------------------------------------|---------------------|-------------|
| instance-1    | RUNNING         | 8d5dc38ef71f6249f7090947bb444ace3d5682c3 | joeblow@example.com | 2022-06-12  |
|---------------|-----------------|------------------------------------------|---------------------|-------------|
| instance-1-b  | RUNNING         | 219001a1ecac6c17e8e3a45f7c9182341e4cf71b | joeblow@example.com | 2022-06-12  |
|---------------|-----------------|------------------------------------------|---------------------|-------------|</msg>
<msg timestamp="20220719 22:25:04.205" level="INFO"/>
<status status="PASS" starttime="20220719 22:25:02.799" endtime="20220719 22:25:04.206"/>
</kw>
<status status="PASS" starttime="20220719 22:25:02.797" endtime="20220719 22:25:04.207"/>
</test>
<test id="s1-s2-t22" name="Join GCP Three Way">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_CONTRIVED_GCP_THREE_WAY_JOIN}</arg>
<arg>${SELECT_CONTRIVED_GCP_THREE_WAY_JOIN_EXPECTED}</arg>
<msg timestamp="20220719 22:25:04.209" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:25:04.209" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:25:04.209" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:25:04.210" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select d1.name as n, d1.id, n1.description, s1.description as s1_description from google.compute.disks d1 inner join google.compute.networks n1 on d1.name = n1.name inner join google.compute.subnetworks s1 on d1.name = s1.name where d1.project = 'testing-project' and d1.zone = 'australia-southeast1-b' and n1.project = 'testing-project' and s1.project = 'testing-project' and s1.region = 'australia-southeast1' ;"</msg>
<msg timestamp="20220719 22:25:04.221" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:25:05.505" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:25:05.505" level="INFO">|---------------|---------------------|-------------------|------------------|
|       n       |         id          |    description    |  s1_description  |
|---------------|---------------------|-------------------|------------------|
| demo-disk-xx5 | 3236826943903762400 | matchable network | matchable subnet |
|---------------|---------------------|-------------------|------------------|</msg>
<msg timestamp="20220719 22:25:05.505" level="INFO"/>
<status status="PASS" starttime="20220719 22:25:04.208" endtime="20220719 22:25:05.505"/>
</kw>
<status status="PASS" starttime="20220719 22:25:04.207" endtime="20220719 22:25:05.506"/>
</test>
<test id="s1-s2-t23" name="Join GCP Self">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_CONTRIVED_GCP_SELF_JOIN}</arg>
<arg>${SELECT_CONTRIVED_GCP_SELF_JOIN_EXPECTED}</arg>
<msg timestamp="20220719 22:25:05.510" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:25:05.510" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:25:05.510" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:25:05.510" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select d1.name as n, d1.id, d2.id as d2_id from google.compute.disks d1 inner join google.compute.disks d2 on d1.id = d2.id where d1.project = 'testing-project' and d1.zone = 'australia-southeast1-b' and d2.project = 'testing-project' and d2.zone = 'australia-southeast1-b' order by d1.name ASC;"</msg>
<msg timestamp="20220719 22:25:05.516" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:25:06.041" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:25:06.041" level="INFO">|---------------|---------------------|---------------------|
|       n       |         id          |        d2_id        |
|---------------|---------------------|---------------------|
| demo-disk-qq1 | 6957941705271944342 | 6957941705271944342 |
|---------------|---------------------|---------------------|
| demo-disk-qq2 | 1624656788334582894 | 1624656788334582894 |
|---------------|---------------------|---------------------|
| demo-disk-xx2 | 3236826943903762397 | 3236826943903762397 |
|---------------|---------------------|---------------------|
| demo-disk-xx3 | 3236826943903762398 | 3236826943903762398 |
|---------------|---------------------|---------------------|
| demo-disk-xx4 | 3236826943903762399 | 3236826943903762399 |
|---------------|---------------------|---------------------|
| demo-disk-xx5 | 3236826943903762400 | 3236826943903762400 |
|---------------|---------------------|---------------------|</msg>
<msg timestamp="20220719 22:25:06.041" level="INFO"/>
<status status="PASS" starttime="20220719 22:25:05.508" endtime="20220719 22:25:06.042"/>
</kw>
<status status="PASS" starttime="20220719 22:25:05.507" endtime="20220719 22:25:06.043"/>
</test>
<test id="s1-s2-t24" name="K8S Nodes Select Leveraging JSON Path">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_K8S_NODES_ASC}</arg>
<arg>${SELECT_K8S_NODES_ASC_EXPECTED}</arg>
<msg timestamp="20220719 22:25:06.047" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:25:06.048" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:25:06.048" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:25:06.048" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select name, uid, creationTimestamp from k8s.core_v1.node where cluster_addr = '127.0.0.1:1092' order by name asc;"</msg>
<msg timestamp="20220719 22:25:06.066" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:25:08.824" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:25:08.824" level="INFO">|-----------------------------------------------------|--------------------------------------|----------------------|
|                        name                         |                 uid                  |  creationTimestamp   |
|-----------------------------------------------------|--------------------------------------|----------------------|
| eg0-demok8s-demo-cluster-default-pool-9f8f9edf-ivzy | d5626684-69a3-4644-bf2b-a8e67bb44b01 | 2022-05-26T19:18:31Z |
|-----------------------------------------------------|--------------------------------------|----------------------|
| eg0-demok8s-demo-cluster-default-pool-9f8f9edf-vyi1 | b5bae525-1c4d-4c5f-a42d-512a4420cb57 | 2022-05-26T19:22:07Z |
|-----------------------------------------------------|--------------------------------------|----------------------|
| eg0-demok8s-demo-cluster-default-pool-9f8f9edf-ws25 | 5ca798ab-474c-43ea-a8bc-9bc98fa698bc | 2022-05-26T19:14:58Z |
|-----------------------------------------------------|--------------------------------------|----------------------|</msg>
<msg timestamp="20220719 22:25:08.824" level="INFO"/>
<status status="PASS" starttime="20220719 22:25:06.044" endtime="20220719 22:25:08.825"/>
</kw>
<status status="PASS" starttime="20220719 22:25:06.043" endtime="20220719 22:25:08.825"/>
</test>
<test id="s1-s2-t25" name="Google Compute Instance IAM Policy Select">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GOOGLE_COMPUTE_INSTANCE_IAM_POLICY}</arg>
<arg>${SELECT_GOOGLE_COMPUTE_INSTANCE_IAM_POLICY_EXPECTED}</arg>
<msg timestamp="20220719 22:25:08.829" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:25:08.829" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:25:08.829" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:25:08.830" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "SELECT eTag FROM google.compute.instances_iam_policies WHERE project = 'testing-project' AND zone = 'australia-southeast1-a' AND resource = '000000001';"</msg>
<msg timestamp="20220719 22:25:08.838" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:25:09.971" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:25:09.971" level="INFO">|------|
| eTag |
|------|
| ACAB |
|------|</msg>
<msg timestamp="20220719 22:25:09.971" level="INFO"/>
<status status="PASS" starttime="20220719 22:25:08.828" endtime="20220719 22:25:09.972"/>
</kw>
<status status="PASS" starttime="20220719 22:25:08.826" endtime="20220719 22:25:09.972"/>
</test>
<test id="s1-s2-t26" name="Google IAM Policy Show Insert">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SHOW_INSERT_GOOGLE_IAM_SERVICE_ACCOUNTS}</arg>
<arg>${SHOW_INSERT_GOOGLE_IAM_SERVICE_ACCOUNTS_EXPECTED}</arg>
<msg timestamp="20220719 22:25:09.977" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:25:09.977" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:25:09.977" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:25:09.977" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show insert into google.iam.service_accounts;"</msg>
<msg timestamp="20220719 22:25:09.983" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:25:10.088" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:25:10.088" level="INFO">|---------------------------------------------|
|              insert_statement               |
|---------------------------------------------|
| INSERT INTO google.iam.service_accounts(    |
|   projectsId,   data__accountId,            |
|   data__serviceAccount ) SELECT             |
|   '{{ .values.projectsId }}',               |
|   '{{ .values.data__accountId               |
| }}',   '{ "description": "{{                |
| .values.data__serviceAccount.description    |
| }}", "disabled": {{                         |
| .values.data__serviceAccount.disabled       |
| }}, "displayName": "{{                      |
| .values.data__serviceAccount.displayName    |
| }}", "email": "{{                           |
| .values.data__serviceAccount.email          |
| }}", "etag": "{{                            |
| .values.data__serviceAccount.etag           |
| }}", "name": "{{                            |
| .values.data__serviceAccount.name           |
| }}", "oauth2ClientId": "{{                  |
| .values.data__serviceAccount.oauth2ClientId |
| }}", "projectId": "{{                       |
| .values.data__serviceAccount.projectId      |
| }}", "uniqueId": "{{                        |
| .values.data__serviceAccount.uniqueId }}"   |
| }' ;                                        |
|---------------------------------------------|</msg>
<msg timestamp="20220719 22:25:10.089" level="INFO"/>
<status status="PASS" starttime="20220719 22:25:09.975" endtime="20220719 22:25:10.089"/>
</kw>
<status status="PASS" starttime="20220719 22:25:09.973" endtime="20220719 22:25:10.090"/>
</test>
<test id="s1-s2-t27" name="Google Compute Instance IAM Policy Show Insert Error">
<kw name="Should Stackql Exec Inline Equal Stderr" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SHOW_INSERT_GOOGLE_COMPUTE_INSTANCE_IAM_POLICY_ERROR}</arg>
<arg>${SHOW_INSERT_GOOGLE_COMPUTE_INSTANCE_IAM_POLICY_ERROR_EXPECTED}</arg>
<msg timestamp="20220719 22:25:10.094" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:25:10.095" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:25:10.095" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:25:10.095" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show insert into google.compute.instances_iam_policies;"</msg>
<msg timestamp="20220719 22:25:10.103" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:25:11.029" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:25:11.029" level="INFO"/>
<msg timestamp="20220719 22:25:11.029" level="INFO">Cannot find matching operation, possible causes include missing required parameters or an unsupported method for the resource, to find required parameters for supported methods run SHOW METHODS IN google.compute.instances_iam_policies: cannot resolve Method</msg>
<status status="PASS" starttime="20220719 22:25:10.092" endtime="20220719 22:25:11.030"/>
</kw>
<status status="PASS" starttime="20220719 22:25:10.090" endtime="20220719 22:25:11.031"/>
</test>
<test id="s1-s2-t28" name="Registry List All">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_MOCKED_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${REGISTRY_LIST}</arg>
<arg>${REGISTRY_LIST_EXPECTED}</arg>
<msg timestamp="20220719 22:25:11.035" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:25:11.035" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:25:11.035" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:25:11.036" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"http://localhost:1094/gh/stackql/stackql-provider-registry/main/providers\", \"verifyConfig\": {\"nopVerify\": false}, \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/robot/variables/registry/mocked\"}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "registry list;"</msg>
<msg timestamp="20220719 22:25:11.044" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:25:11.535" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:25:11.535" level="INFO">|----------|---------|
| provider | version |
|----------|---------|
| github   | v0.3.0  |
|----------|---------|
| google   | v0.1.2  |
|----------|---------|
| netlify  | v0.2.0  |
|----------|---------|
| okta     | v0.1.0  |
|----------|---------|</msg>
<msg timestamp="20220719 22:25:11.535" level="INFO"/>
<status status="PASS" starttime="20220719 22:25:11.033" endtime="20220719 22:25:11.535"/>
</kw>
<status status="PASS" starttime="20220719 22:25:11.032" endtime="20220719 22:25:11.536"/>
</test>
<test id="s1-s2-t29" name="Registry List Google Provider">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_MOCKED_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${REGISTRY_GOOGLE_PROVIDER_LIST}</arg>
<arg>${REGISTRY_GOOGLE_PROVIDER_LIST_EXPECTED}</arg>
<msg timestamp="20220719 22:25:11.540" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:25:11.540" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:25:11.541" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:25:11.541" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"http://localhost:1094/gh/stackql/stackql-provider-registry/main/providers\", \"verifyConfig\": {\"nopVerify\": false}, \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/robot/variables/registry/mocked\"}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "registry list google;"</msg>
<msg timestamp="20220719 22:25:11.548" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:25:11.630" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:25:11.631" level="INFO">|----------|------------------------|
| provider |        versions        |
|----------|------------------------|
| google   | v0.1.0, v0.1.1, v0.1.2 |
|----------|------------------------|</msg>
<msg timestamp="20220719 22:25:11.631" level="INFO"/>
<status status="PASS" starttime="20220719 22:25:11.538" endtime="20220719 22:25:11.631"/>
</kw>
<status status="PASS" starttime="20220719 22:25:11.537" endtime="20220719 22:25:11.632"/>
</test>
<test id="s1-s2-t30" name="Data Flow Sequential Join Paginated Select Github">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GITHUB_JOIN_DATA_FLOW_SEQUENTIAL}</arg>
<arg>${SELECT_GITHUB_JOIN_DATA_FLOW_SEQUENTIAL_EXPECTED}</arg>
<msg timestamp="20220719 22:25:11.637" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:25:11.637" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:25:11.637" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:25:11.638" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select u.name, om.login, u.two_factor_authentication AS is_two_fa_enabled from github.orgs.members om inner join github.users.users u on om.login = u.login AND u.username = om.login where om.org = 'dummyorg' order by u.name desc;"</msg>
<msg timestamp="20220719 22:25:11.647" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:25:12.591" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:25:12.592" level="INFO">|-----------------------|--------------|-------------------|
|         name          |    login     | is_two_fa_enabled |
|-----------------------|--------------|-------------------|
| monalisa octocat-4    | octocat-4    | null              |
|-----------------------|--------------|-------------------|
| monalisa octocat-3    | octocat-3    | null              |
|-----------------------|--------------|-------------------|
| monalisa octocat-2    | octocat-2    | null              |
|-----------------------|--------------|-------------------|
| monalisa octocat-1    | octocat-1    | null              |
|-----------------------|--------------|-------------------|
| monalisa mrfootball-4 | mrfootball-4 | null              |
|-----------------------|--------------|-------------------|
| monalisa mrfootball-3 | mrfootball-3 | null              |
|-----------------------|--------------|-------------------|
| monalisa mrfootball-2 | mrfootball-2 | null              |
|-----------------------|--------------|-------------------|
| monalisa mrfootball-1 | mrfootball-1 | null              |
|-----------------------|--------------|-------------------|
| monalisa knuckles-4   | knuckles-4   | null              |
|-----------------------|--------------|-------------------|
| monalisa knuckles-3   | knuckles-3   | null              |
|-----------------------|--------------|-------------------|
| monalisa knuckles-2   | knuckles-2   | null              |
|-----------------------|--------------|-------------------|
| monalisa knuckles-1   | knuckles-1   | null              |
|-----------------------|--------------|-------------------|
| monalisa decapod-4    | decapod-4    | null              |
|-----------------------|--------------|-------------------|
| monalisa decapod-3    | decapod-3    | null              |
|-----------------------|--------------|-------------------|
| monalisa decapod-2    | decapod-2    | null              |
|-----------------------|--------------|-------------------|
| monalisa decapod-1    | decapod-1    | null              |
|-----------------------|--------------|-------------------|</msg>
<msg timestamp="20220719 22:25:12.592" level="INFO"/>
<status status="PASS" starttime="20220719 22:25:11.635" endtime="20220719 22:25:12.593"/>
</kw>
<status status="PASS" starttime="20220719 22:25:11.633" endtime="20220719 22:25:12.594"/>
</test>
<test id="s1-s2-t31" name="Data Flow Sequential Join Select With Functions Github">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GITHUB_SCIM_JOIN_WITH_FUNCTIONS}</arg>
<arg>${SELECT_GITHUB_SCIM_JOIN_WITH_FUNCTIONS_EXPECTED}</arg>
<msg timestamp="20220719 22:25:12.599" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:25:12.599" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:25:12.599" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:25:12.600" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select substr(su.userName, 1, instr(su.userName, '@') - 1), su.externalId, su.id, u.login, u.two_factor_authentication AS is_two_fa_enabled from github.scim.users su inner join github.users.users u ON substr(su.userName, 1, instr(su.userName, '@') - 1) = u.username and substr(su.userName, 1, instr(su.userName, '@') - 1) = u.login where su.org = 'dummyorg' order by su.id asc;"</msg>
<msg timestamp="20220719 22:25:12.611" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:25:12.797" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:25:12.797" level="INFO">|-----------|----------------------|--------------------------------------|-----------|-------------------|
|   col_1   |      externalId      |                  id                  |   login   | is_two_fa_enabled |
|-----------|----------------------|--------------------------------------|-----------|-------------------|
| octocat   | 00u1dhhb1fkIGP7RL1d8 | 5fc0c238-1112-11e8-8e45-920c87bdbd75 | octocat   | null              |
|-----------|----------------------|--------------------------------------|-----------|-------------------|
| crazydude | 00u1dhhb1fkIGP7RL1d9 | 5fc0c238-1112-11e8-8e45-920c87bdbd76 | crazydude | null              |
|-----------|----------------------|--------------------------------------|-----------|-------------------|</msg>
<msg timestamp="20220719 22:25:12.797" level="INFO"/>
<status status="PASS" starttime="20220719 22:25:12.597" endtime="20220719 22:25:12.798"/>
</kw>
<status status="PASS" starttime="20220719 22:25:12.595" endtime="20220719 22:25:12.798"/>
</test>
<test id="s1-s2-t32" name="Page Limited Select Github">
<kw name="Should Stackql Exec Inline Equal Page Limited" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>2</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GITHUB_ORGS_MEMBERS}</arg>
<arg>${SELECT_GITHUB_ORGS_MEMBERS_PAGE_LIMITED_EXPECTED}</arg>
<msg timestamp="20220719 22:25:12.803" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:25:12.803" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:25:12.803" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:25:12.804" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select om.login from github.orgs.members om where om.org = 'dummyorg' order by om.login desc;" --http.response.pageLimit=2</msg>
<msg timestamp="20220719 22:25:12.811" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:25:12.967" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:25:12.968" level="INFO">|--------------|
|    login     |
|--------------|
| octocat-2    |
|--------------|
| octocat-1    |
|--------------|
| mrfootball-2 |
|--------------|
| mrfootball-1 |
|--------------|
| knuckles-2   |
|--------------|
| knuckles-1   |
|--------------|
| decapod-2    |
|--------------|
| decapod-1    |
|--------------|</msg>
<msg timestamp="20220719 22:25:12.968" level="INFO"/>
<status status="PASS" starttime="20220719 22:25:12.801" endtime="20220719 22:25:12.968"/>
</kw>
<status status="PASS" starttime="20220719 22:25:12.800" endtime="20220719 22:25:12.969"/>
</test>
<test id="s1-s2-t33" name="Basic Query mTLS Returns OK">
<kw name="Should PG Client Inline Contain" library="StackQLInterfaces">
<arg>/Users/admin/stackql/stackql-devel/test/robot/functional</arg>
<arg>${PSQL_EXE}</arg>
<arg>${PSQL_MTLS_CONN_STR}</arg>
<arg>${SELECT_CONTAINER_SUBNET_AGG_ASC}</arg>
<arg>ipCidrRange</arg>
<msg timestamp="20220719 22:25:12.973" level="INFO">Starting process:
psql -d "host=127.0.0.1 port=5476 user=myuser sslmode=verify-full sslcert=/Users/admin/stackql/stackql-devel/test/server/mtls/credentials/pg_client_cert.pem sslkey=/Users/admin/stackql/stackql-devel/test/server/mtls/credentials/pg_client_key.pem sslrootcert=/Users/admin/stackql/stackql-devel/test/server/mtls/credentials/pg_server_cert.pem dbname=mydatabase" -c "select ipCidrRange, sum(5) cc  from  google.container.`projects.aggregated.usableSubnetworks` where projectsId = 'testing-project' group by \"ipCidrRange\" having sum(5) &gt;= 5 order by ipCidrRange asc;"</msg>
<msg timestamp="20220719 22:25:12.980" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:25:13.007" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:25:13.007" level="INFO"/>
<msg timestamp="20220719 22:25:13.007" level="INFO">psql: error: connection to server at "127.0.0.1", port 5476 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?</msg>
<msg timestamp="20220719 22:25:13.014" level="FAIL">'' does not contain 'ipCidrRange'</msg>
<status status="FAIL" starttime="20220719 22:25:12.972" endtime="20220719 22:25:13.014"/>
</kw>
<status status="FAIL" starttime="20220719 22:25:12.970" endtime="20220719 22:25:13.015">'' does not contain 'ipCidrRange'</status>
</test>
<test id="s1-s2-t34" name="Basic Query unencrypted Returns OK">
<kw name="Should PG Client Inline Contain" library="StackQLInterfaces">
<arg>/Users/admin/stackql/stackql-devel/test/robot/functional</arg>
<arg>${PSQL_EXE}</arg>
<arg>${PSQL_UNENCRYPTED_CONN_STR}</arg>
<arg>${SELECT_CONTAINER_SUBNET_AGG_ASC}</arg>
<arg>ipCidrRange</arg>
<msg timestamp="20220719 22:25:13.020" level="INFO">Starting process:
psql -d "host=127.0.0.1 port=5477 user=myuser dbname=mydatabase" -c "select ipCidrRange, sum(5) cc  from  google.container.`projects.aggregated.usableSubnetworks` where projectsId = 'testing-project' group by \"ipCidrRange\" having sum(5) &gt;= 5 order by ipCidrRange asc;"</msg>
<msg timestamp="20220719 22:25:13.025" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:25:13.033" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:25:13.033" level="INFO"/>
<msg timestamp="20220719 22:25:13.034" level="INFO">psql: error: connection to server at "127.0.0.1", port 5477 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?</msg>
<msg timestamp="20220719 22:25:13.035" level="FAIL">'' does not contain 'ipCidrRange'</msg>
<status status="FAIL" starttime="20220719 22:25:13.018" endtime="20220719 22:25:13.035"/>
</kw>
<status status="FAIL" starttime="20220719 22:25:13.016" endtime="20220719 22:25:13.037">'' does not contain 'ipCidrRange'</status>
</test>
<test id="s1-s2-t35" name="Erroneous mTLS Config Plus Basic Query Returns Error">
<kw name="Should PG Client Error Inline Contain" library="StackQLInterfaces">
<arg>/Users/admin/stackql/stackql-devel/test/robot/functional</arg>
<arg>${PSQL_EXE}</arg>
<arg>${PSQL_MTLS_INVALID_CONN_STR}</arg>
<arg>${SELECT_CONTAINER_SUBNET_AGG_ASC}</arg>
<arg>error</arg>
<msg timestamp="20220719 22:25:13.040" level="INFO">Starting process:
psql -d "host=127.0.0.1 port=5476 user=myuser sslmode=verify-full sslcert=/Users/admin/stackql/stackql-devel/test/server/mtls/credentials/pg_rubbish_cert.pem sslkey=/Users/admin/stackql/stackql-devel/test/server/mtls/credentials/pg_rubbish_key.pem sslrootcert=/Users/admin/stackql/stackql-devel/test/server/mtls/credentials/pg_server_cert.pem dbname=mydatabase" -c "select ipCidrRange, sum(5) cc  from  google.container.`projects.aggregated.usableSubnetworks` where projectsId = 'testing-project' group by \"ipCidrRange\" having sum(5) &gt;= 5 order by ipCidrRange asc;"</msg>
<msg timestamp="20220719 22:25:13.047" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:25:13.060" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:25:13.060" level="INFO"/>
<msg timestamp="20220719 22:25:13.060" level="INFO">psql: error: connection to server at "127.0.0.1", port 5476 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?</msg>
<status status="PASS" starttime="20220719 22:25:13.039" endtime="20220719 22:25:13.060"/>
</kw>
<status status="PASS" starttime="20220719 22:25:13.038" endtime="20220719 22:25:13.061"/>
</test>
<status status="FAIL" starttime="20220719 22:24:38.488" endtime="20220719 22:25:13.064"/>
</suite>
<kw name="Terminate All Processes" library="Process" type="TEARDOWN">
<doc>Terminates all still running processes started by this library.</doc>
<msg timestamp="20220719 22:25:13.076" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20220719 22:25:43.133" level="INFO">Graceful termination failed.</msg>
<msg timestamp="20220719 22:25:43.133" level="INFO">Forcefully killing process.</msg>
<msg timestamp="20220719 22:25:43.239" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:25:43.239" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20220719 22:26:13.246" level="INFO">Graceful termination failed.</msg>
<msg timestamp="20220719 22:26:13.247" level="INFO">Forcefully killing process.</msg>
<msg timestamp="20220719 22:26:13.351" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:26:13.352" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20220719 22:26:43.366" level="INFO">Graceful termination failed.</msg>
<msg timestamp="20220719 22:26:43.366" level="INFO">Forcefully killing process.</msg>
<msg timestamp="20220719 22:26:43.472" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:26:43.472" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20220719 22:26:43.884" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:26:43.884" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20220719 22:27:13.910" level="INFO">Graceful termination failed.</msg>
<msg timestamp="20220719 22:27:13.910" level="INFO">Forcefully killing process.</msg>
<msg timestamp="20220719 22:27:14.012" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:27:14.012" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20220719 22:27:14.424" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220719 22:25:13.076" endtime="20220719 22:27:14.426"/>
</kw>
<status status="FAIL" starttime="20220719 22:23:50.113" endtime="20220719 22:27:14.426"/>
</suite>
<statistics>
<total>
<stat pass="40" fail="2" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="40" fail="2" skip="0" id="s1" name="Functional">Functional</stat>
<stat pass="7" fail="0" skip="0" id="s1-s1" name="Stackql From Cmd Line">Functional.Stackql From Cmd Line</stat>
<stat pass="33" fail="2" skip="0" id="s1-s2" name="Stackql Mocked From Cmd Line">Functional.Stackql Mocked From Cmd Line</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
