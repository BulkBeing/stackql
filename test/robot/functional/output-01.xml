<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 4.1.3 (Python 3.8.8 on darwin)" generated="20220719 22:11:31.114" rpa="false" schemaversion="2">
<suite id="s1" name="Functional" source="/Users/admin/stackql/stackql-devel/test/robot/functional">
<kw name="Prepare StackQL Environment" library="stackql" type="SETUP">
<kw name="Set Environment Variable" library="OperatingSystem">
<arg>OKTA_SECRET_KEY</arg>
<arg>${OKTA_SECRET_STR}</arg>
<doc>Sets an environment variable to a specified value.</doc>
<msg timestamp="20220719 22:11:31.225" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<status status="PASS" starttime="20220719 22:11:31.225" endtime="20220719 22:11:31.225"/>
</kw>
<kw name="Set Environment Variable" library="OperatingSystem">
<arg>GITHUB_SECRET_KEY</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<doc>Sets an environment variable to a specified value.</doc>
<msg timestamp="20220719 22:11:31.226" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<status status="PASS" starttime="20220719 22:11:31.225" endtime="20220719 22:11:31.226"/>
</kw>
<kw name="Set Environment Variable" library="OperatingSystem">
<arg>K8S_SECRET_KEY</arg>
<arg>${K8S_SECRET_STR}</arg>
<doc>Sets an environment variable to a specified value.</doc>
<msg timestamp="20220719 22:11:31.226" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<status status="PASS" starttime="20220719 22:11:31.226" endtime="20220719 22:11:31.226"/>
</kw>
<kw name="Start Mock Server" library="stackql">
<arg>${JSON_INIT_FILE_PATH_GOOGLE}</arg>
<arg>${MOCKSERVER_JAR}</arg>
<arg>${MOCKSERVER_PORT_GOOGLE}</arg>
<kw name="Start Process" library="Process">
<var>${process}</var>
<arg>java</arg>
<arg>\-Dfile.encoding\=UTF-8</arg>
<arg>\-Dmockserver.initializationJsonPath\=${_JSON_INIT_FILE_PATH}</arg>
<arg>\-jar</arg>
<arg>${_MOCKSERVER_JAR}</arg>
<arg>\-serverPort</arg>
<arg>${_MOCKSERVER_PORT}</arg>
<arg>\-logLevel</arg>
<arg>INFO</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20220719 22:11:31.228" level="INFO">Starting process:
java -Dfile.encoding=UTF-8 -Dmockserver.initializationJsonPath=/Users/admin/stackql/stackql-devel/test/mockserver/expectations/static-gcp-expectations.json -jar /Users/admin/stackql/stackql-devel/test/downloads/mockserver-netty-5.12.0-shaded.jar -serverPort 1080 -logLevel INFO</msg>
<msg timestamp="20220719 22:11:31.239" level="INFO">${process} = 1</msg>
<status status="PASS" starttime="20220719 22:11:31.227" endtime="20220719 22:11:31.240"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220719 22:11:36.243" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220719 22:11:31.240" endtime="20220719 22:11:36.243"/>
</kw>
<status status="PASS" starttime="20220719 22:11:31.226" endtime="20220719 22:11:36.244"/>
</kw>
<kw name="Start Mock Server" library="stackql">
<arg>${JSON_INIT_FILE_PATH_OKTA}</arg>
<arg>${MOCKSERVER_JAR}</arg>
<arg>${MOCKSERVER_PORT_OKTA}</arg>
<kw name="Start Process" library="Process">
<var>${process}</var>
<arg>java</arg>
<arg>\-Dfile.encoding\=UTF-8</arg>
<arg>\-Dmockserver.initializationJsonPath\=${_JSON_INIT_FILE_PATH}</arg>
<arg>\-jar</arg>
<arg>${_MOCKSERVER_JAR}</arg>
<arg>\-serverPort</arg>
<arg>${_MOCKSERVER_PORT}</arg>
<arg>\-logLevel</arg>
<arg>INFO</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20220719 22:11:36.247" level="INFO">Starting process:
java -Dfile.encoding=UTF-8 -Dmockserver.initializationJsonPath=/Users/admin/stackql/stackql-devel/test/mockserver/expectations/static-okta-expectations.json -jar /Users/admin/stackql/stackql-devel/test/downloads/mockserver-netty-5.12.0-shaded.jar -serverPort 1090 -logLevel INFO</msg>
<msg timestamp="20220719 22:11:36.258" level="INFO">${process} = 2</msg>
<status status="PASS" starttime="20220719 22:11:36.246" endtime="20220719 22:11:36.258"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220719 22:11:41.262" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220719 22:11:36.259" endtime="20220719 22:11:41.262"/>
</kw>
<status status="PASS" starttime="20220719 22:11:36.244" endtime="20220719 22:11:41.263"/>
</kw>
<kw name="Start Mock Server" library="stackql">
<arg>${JSON_INIT_FILE_PATH_GITHUB}</arg>
<arg>${MOCKSERVER_JAR}</arg>
<arg>${MOCKSERVER_PORT_GITHUB}</arg>
<kw name="Start Process" library="Process">
<var>${process}</var>
<arg>java</arg>
<arg>\-Dfile.encoding\=UTF-8</arg>
<arg>\-Dmockserver.initializationJsonPath\=${_JSON_INIT_FILE_PATH}</arg>
<arg>\-jar</arg>
<arg>${_MOCKSERVER_JAR}</arg>
<arg>\-serverPort</arg>
<arg>${_MOCKSERVER_PORT}</arg>
<arg>\-logLevel</arg>
<arg>INFO</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20220719 22:11:41.266" level="INFO">Starting process:
java -Dfile.encoding=UTF-8 -Dmockserver.initializationJsonPath=/Users/admin/stackql/stackql-devel/test/mockserver/expectations/static-github-expectations.json -jar /Users/admin/stackql/stackql-devel/test/downloads/mockserver-netty-5.12.0-shaded.jar -serverPort 1093 -logLevel INFO</msg>
<msg timestamp="20220719 22:11:41.275" level="INFO">${process} = 3</msg>
<status status="PASS" starttime="20220719 22:11:41.265" endtime="20220719 22:11:41.276"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220719 22:11:46.278" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220719 22:11:41.276" endtime="20220719 22:11:46.279"/>
</kw>
<status status="PASS" starttime="20220719 22:11:41.263" endtime="20220719 22:11:46.279"/>
</kw>
<kw name="Start Mock Server" library="stackql">
<arg>${JSON_INIT_FILE_PATH_AWS}</arg>
<arg>${MOCKSERVER_JAR}</arg>
<arg>${MOCKSERVER_PORT_AWS}</arg>
<kw name="Start Process" library="Process">
<var>${process}</var>
<arg>java</arg>
<arg>\-Dfile.encoding\=UTF-8</arg>
<arg>\-Dmockserver.initializationJsonPath\=${_JSON_INIT_FILE_PATH}</arg>
<arg>\-jar</arg>
<arg>${_MOCKSERVER_JAR}</arg>
<arg>\-serverPort</arg>
<arg>${_MOCKSERVER_PORT}</arg>
<arg>\-logLevel</arg>
<arg>INFO</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20220719 22:11:46.283" level="INFO">Starting process:
java -Dfile.encoding=UTF-8 -Dmockserver.initializationJsonPath=/Users/admin/stackql/stackql-devel/test/mockserver/expectations/static-aws-expectations.json -jar /Users/admin/stackql/stackql-devel/test/downloads/mockserver-netty-5.12.0-shaded.jar -serverPort 1091 -logLevel INFO</msg>
<msg timestamp="20220719 22:11:46.292" level="INFO">${process} = 4</msg>
<status status="PASS" starttime="20220719 22:11:46.281" endtime="20220719 22:11:46.292"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220719 22:11:51.302" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220719 22:11:46.292" endtime="20220719 22:11:51.302"/>
</kw>
<status status="PASS" starttime="20220719 22:11:46.280" endtime="20220719 22:11:51.305"/>
</kw>
<kw name="Start Mock Server" library="stackql">
<arg>${JSON_INIT_FILE_PATH_K8S}</arg>
<arg>${MOCKSERVER_JAR}</arg>
<arg>${MOCKSERVER_PORT_K8S}</arg>
<kw name="Start Process" library="Process">
<var>${process}</var>
<arg>java</arg>
<arg>\-Dfile.encoding\=UTF-8</arg>
<arg>\-Dmockserver.initializationJsonPath\=${_JSON_INIT_FILE_PATH}</arg>
<arg>\-jar</arg>
<arg>${_MOCKSERVER_JAR}</arg>
<arg>\-serverPort</arg>
<arg>${_MOCKSERVER_PORT}</arg>
<arg>\-logLevel</arg>
<arg>INFO</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20220719 22:11:51.309" level="INFO">Starting process:
java -Dfile.encoding=UTF-8 -Dmockserver.initializationJsonPath=/Users/admin/stackql/stackql-devel/test/mockserver/expectations/static-k8s-expectations.json -jar /Users/admin/stackql/stackql-devel/test/downloads/mockserver-netty-5.12.0-shaded.jar -serverPort 1092 -logLevel INFO</msg>
<msg timestamp="20220719 22:11:51.324" level="INFO">${process} = 5</msg>
<status status="PASS" starttime="20220719 22:11:51.307" endtime="20220719 22:11:51.328"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220719 22:11:56.330" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220719 22:11:51.328" endtime="20220719 22:11:56.330"/>
</kw>
<status status="PASS" starttime="20220719 22:11:51.305" endtime="20220719 22:11:56.331"/>
</kw>
<kw name="Start Mock Server" library="stackql">
<arg>${JSON_INIT_FILE_PATH_REGISTRY}</arg>
<arg>${MOCKSERVER_JAR}</arg>
<arg>${MOCKSERVER_PORT_REGISTRY}</arg>
<kw name="Start Process" library="Process">
<var>${process}</var>
<arg>java</arg>
<arg>\-Dfile.encoding\=UTF-8</arg>
<arg>\-Dmockserver.initializationJsonPath\=${_JSON_INIT_FILE_PATH}</arg>
<arg>\-jar</arg>
<arg>${_MOCKSERVER_JAR}</arg>
<arg>\-serverPort</arg>
<arg>${_MOCKSERVER_PORT}</arg>
<arg>\-logLevel</arg>
<arg>INFO</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20220719 22:11:56.334" level="INFO">Starting process:
java -Dfile.encoding=UTF-8 -Dmockserver.initializationJsonPath=/Users/admin/stackql/stackql-devel/test/mockserver/expectations/static-registry-expectations.json -jar /Users/admin/stackql/stackql-devel/test/downloads/mockserver-netty-5.12.0-shaded.jar -serverPort 1094 -logLevel INFO</msg>
<msg timestamp="20220719 22:11:56.343" level="INFO">${process} = 6</msg>
<status status="PASS" starttime="20220719 22:11:56.333" endtime="20220719 22:11:56.343"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>5s</arg>
<doc>Pauses the test executed for the given time.</doc>
<msg timestamp="20220719 22:12:01.347" level="INFO">Slept 5 seconds</msg>
<status status="PASS" starttime="20220719 22:11:56.344" endtime="20220719 22:12:01.347"/>
</kw>
<status status="PASS" starttime="20220719 22:11:56.331" endtime="20220719 22:12:01.348"/>
</kw>
<kw name="Start StackQL PG Server mTLS" library="stackql">
<arg>${PG_SRV_PORT_MTLS}</arg>
<arg>${PG_SRV_MTLS_CFG_STR}</arg>
<if>
<branch type="IF" condition="&quot;${EXECUTION_PLATFORM}&quot; == &quot;native&quot;">
<kw name="Start Process" library="Process">
<var>${process}</var>
<arg>${STACKQL_EXE}</arg>
<arg>srv</arg>
<arg>\-\-registry\=${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>\-\-auth\=${AUTH_CFG_STR}</arg>
<arg>\-\-tls\.allowInsecure\=true</arg>
<arg>\-\-pgsrv\.address\=0.0.0.0</arg>
<arg>\-\-pgsrv\.port\=${_SRV_PORT_MTLS}</arg>
<arg>\-\-pgsrv\.tls</arg>
<arg>${_MTLS_CFG_STR}</arg>
<doc>Starts a new process on background.</doc>
<status status="NOT RUN" starttime="20220719 22:12:01.351" endtime="20220719 22:12:01.351"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>15s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 22:12:01.351" endtime="20220719 22:12:01.351"/>
</kw>
<status status="NOT RUN" starttime="20220719 22:12:01.350" endtime="20220719 22:12:01.351"/>
</branch>
<branch type="ELSE IF" condition="&quot;${EXECUTION_PLATFORM}&quot; == &quot;docker&quot;">
<kw name="Run Process" library="Process">
<var>${res}</var>
<arg>docker-compose</arg>
<arg>run</arg>
<arg>--rm</arg>
<arg>credentialsgen</arg>
<doc>Runs a process and waits for it to complete.</doc>
<msg timestamp="20220719 22:12:01.353" level="INFO">Starting process:
docker-compose run --rm credentialsgen</msg>
<msg timestamp="20220719 22:12:01.363" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:18.740" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:18.741" level="INFO">${res} = &lt;result object with rc 0&gt;</msg>
<status status="PASS" starttime="20220719 22:12:01.352" endtime="20220719 22:12:18.741"/>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<arg>${res.rc}</arg>
<arg>0</arg>
<doc>Fails if objects are unequal after converting them to integers.</doc>
<msg timestamp="20220719 22:12:18.745" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20220719 22:12:18.741" endtime="20220719 22:12:18.745"/>
</kw>
<kw name="Start Process" library="Process">
<var>${process}</var>
<arg>docker-compose</arg>
<arg>-p</arg>
<arg>mtls</arg>
<arg>run</arg>
<arg>--rm</arg>
<arg>-p${_SRV_PORT_MTLS}:${PG_SRV_PORT_DOCKER_MTLS}/tcp</arg>
<arg>stackqlsrv</arg>
<arg>bash</arg>
<arg>-c</arg>
<arg>srv</arg>
<arg>\-\-registry\=${REGISTRY_DOCKER_CFG_STR}</arg>
<arg>\-\-auth\=${AUTH_CFG_STR}</arg>
<arg>\-\-tls\.allowInsecure\=true</arg>
<arg>\-\-pgsrv\.address\=0.0.0.0</arg>
<arg>\-\-pgsrv\.port\=${PG_SRV_PORT_DOCKER_MTLS}</arg>
<arg>\-\-pgsrv\.tls</arg>
<arg>${PG_SRV_MTLS_DOCKER_CFG_STR}</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20220719 22:12:18.747" level="INFO">Starting process:
docker-compose -p mtls run --rm -p5476:5576/tcp stackqlsrv bash -c srv "--registry={\"url\": \"file:///opt/stackql/registry\", \"localDocRoot\": \"/opt/stackql/registry\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true --pgsrv.address=0.0.0.0 --pgsrv.port=5576 --pgsrv.tls "{\"keyFilePath\": \"/opt/stackql/srv/credentials/pg_server_key.pem\", \"certFilePath\": \"/opt/stackql/srv/credentials/pg_server_cert.pem\", \"clientCAs\": [\"$$(base64 -w 0 /opt/stackql/srv/credentials/pg_client_cert.pem)\"]}"</msg>
<msg timestamp="20220719 22:12:18.753" level="INFO">${process} = 8</msg>
<status status="PASS" starttime="20220719 22:12:18.745" endtime="20220719 22:12:18.753"/>
</kw>
<status status="PASS" starttime="20220719 22:12:01.352" endtime="20220719 22:12:18.754"/>
</branch>
<status status="PASS" starttime="20220719 22:12:01.350" endtime="20220719 22:12:18.754"/>
</if>
<status status="PASS" starttime="20220719 22:12:01.348" endtime="20220719 22:12:18.755"/>
</kw>
<kw name="Start StackQL PG Server unencrypted" library="stackql">
<arg>${PG_SRV_PORT_UNENCRYPTED}</arg>
<if>
<branch type="IF" condition="&quot;${EXECUTION_PLATFORM}&quot; == &quot;native&quot;">
<kw name="Start Process" library="Process">
<var>${process}</var>
<arg>${STACKQL_EXE}</arg>
<arg>srv</arg>
<arg>\-\-registry\=${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>\-\-auth\=${AUTH_CFG_STR}</arg>
<arg>\-\-tls\.allowInsecure\=true</arg>
<arg>\-\-pgsrv\.address\=0.0.0.0</arg>
<arg>\-\-pgsrv\.port\=${_SRV_PORT_UNENCRYPTED}</arg>
<doc>Starts a new process on background.</doc>
<status status="NOT RUN" starttime="20220719 22:12:18.757" endtime="20220719 22:12:18.757"/>
</kw>
<kw name="Sleep" library="BuiltIn">
<arg>15s</arg>
<doc>Pauses the test executed for the given time.</doc>
<status status="NOT RUN" starttime="20220719 22:12:18.757" endtime="20220719 22:12:18.757"/>
</kw>
<status status="NOT RUN" starttime="20220719 22:12:18.756" endtime="20220719 22:12:18.757"/>
</branch>
<branch type="ELSE IF" condition="&quot;${EXECUTION_PLATFORM}&quot; == &quot;docker&quot;">
<kw name="Start Process" library="Process">
<var>${process}</var>
<arg>docker-compose</arg>
<arg>-p</arg>
<arg>unencrypted</arg>
<arg>run</arg>
<arg>--rm</arg>
<arg>-p${_SRV_PORT_UNENCRYPTED}:${PG_SRV_PORT_DOCKER_UNENCRYPTED}/tcp</arg>
<arg>stackqlsrv</arg>
<arg>bash</arg>
<arg>-c</arg>
<arg>srv</arg>
<arg>\-\-registry\=${REGISTRY_DOCKER_CFG_STR}</arg>
<arg>\-\-auth\=${AUTH_CFG_STR}</arg>
<arg>\-\-tls\.allowInsecure\=true</arg>
<arg>\-\-pgsrv\.address\=0.0.0.0</arg>
<arg>\-\-pgsrv\.port\=${PG_SRV_PORT_DOCKER_UNENCRYPTED}</arg>
<doc>Starts a new process on background.</doc>
<msg timestamp="20220719 22:12:18.759" level="INFO">Starting process:
docker-compose -p unencrypted run --rm -p5477:5577/tcp stackqlsrv bash -c srv "--registry={\"url\": \"file:///opt/stackql/registry\", \"localDocRoot\": \"/opt/stackql/registry\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true --pgsrv.address=0.0.0.0 --pgsrv.port=5577</msg>
<msg timestamp="20220719 22:12:18.781" level="INFO">${process} = 9</msg>
<status status="PASS" starttime="20220719 22:12:18.757" endtime="20220719 22:12:18.781"/>
</kw>
<status status="PASS" starttime="20220719 22:12:18.757" endtime="20220719 22:12:18.781"/>
</branch>
<status status="PASS" starttime="20220719 22:12:18.756" endtime="20220719 22:12:18.782"/>
</if>
<status status="PASS" starttime="20220719 22:12:18.755" endtime="20220719 22:12:18.783"/>
</kw>
<status status="PASS" starttime="20220719 22:11:31.225" endtime="20220719 22:12:18.783"/>
</kw>
<suite id="s1-s1" name="Stackql From Cmd Line" source="/Users/admin/stackql/stackql-devel/test/robot/functional/stackql_from_cmd_line.robot">
<test id="s1-s1-t1" name="Positive Control">
<kw name="Should Contain" library="BuiltIn">
<arg>''</arg>
<arg>''</arg>
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<status status="PASS" starttime="20220719 22:12:18.823" endtime="20220719 22:12:18.824"/>
</kw>
<status status="PASS" starttime="20220719 22:12:18.818" endtime="20220719 22:12:18.825"/>
</test>
<test id="s1-s1-t2" name="Get Providers">
<kw name="Should StackQL Exec Contain">
<arg>${SHOW_PROVIDERS_STR}</arg>
<arg>okta</arg>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:12:18.831" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:18.831" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:18.831" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:18.832" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show providers;"</msg>
<msg timestamp="20220719 22:12:18.843" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:18.962" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:18.963" level="INFO">|--------|---------|
|  name  | version |
|--------|---------|
| aws    | v0.1.0  |
|--------|---------|
| github | v0.3.1  |
|--------|---------|
| google | v0.1.2  |
|--------|---------|
| k8s    | v0.1.0  |
|--------|---------|
| okta   | v1      |
|--------|---------|</msg>
<msg timestamp="20220719 22:12:18.963" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:18.829" endtime="20220719 22:12:18.963"/>
</kw>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_CANONICAL_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:12:18.966" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:18.967" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:18.967" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:18.967" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry\", \"verifyConfig\": {\"nopVerify\": false}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show providers;"</msg>
<msg timestamp="20220719 22:12:18.980" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:19.014" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:19.014" level="INFO">|--------|---------|
|  name  | version |
|--------|---------|
| aws    | v0.1.0  |
|--------|---------|
| github | v0.3.1  |
|--------|---------|
| google | v0.1.2  |
|--------|---------|
| k8s    | v0.1.0  |
|--------|---------|
| okta   | v1      |
|--------|---------|</msg>
<msg timestamp="20220719 22:12:19.014" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:18.964" endtime="20220719 22:12:19.014"/>
</kw>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_DEPRECATED_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:12:19.017" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:19.017" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:19.017" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:19.018" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-deprecated\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-deprecated\", \"verifyConfig\": {\"nopVerify\": false}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show providers;"</msg>
<msg timestamp="20220719 22:12:19.026" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:19.062" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:19.062" level="INFO">|--------|---------|
|  name  | version |
|--------|---------|
| google | v1      |
|--------|---------|
| okta   | v1      |
|--------|---------|</msg>
<msg timestamp="20220719 22:12:19.062" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:19.015" endtime="20220719 22:12:19.063"/>
</kw>
<status status="PASS" starttime="20220719 22:12:18.827" endtime="20220719 22:12:19.063"/>
</kw>
<kw name="Should StackQL Novel Exec Contain">
<arg>${SHOW_PROVIDERS_STR}</arg>
<arg>v0.3.1</arg>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:12:19.068" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:19.069" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:19.069" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:19.070" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show providers;"</msg>
<msg timestamp="20220719 22:12:19.080" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:19.111" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:19.111" level="INFO">|--------|---------|
|  name  | version |
|--------|---------|
| aws    | v0.1.0  |
|--------|---------|
| github | v0.3.1  |
|--------|---------|
| google | v0.1.2  |
|--------|---------|
| k8s    | v0.1.0  |
|--------|---------|
| okta   | v1      |
|--------|---------|</msg>
<msg timestamp="20220719 22:12:19.112" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:19.066" endtime="20220719 22:12:19.112"/>
</kw>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_CANONICAL_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:12:19.115" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:19.115" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:19.116" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:19.116" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry\", \"verifyConfig\": {\"nopVerify\": false}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show providers;"</msg>
<msg timestamp="20220719 22:12:19.126" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:19.155" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:19.156" level="INFO">|--------|---------|
|  name  | version |
|--------|---------|
| aws    | v0.1.0  |
|--------|---------|
| github | v0.3.1  |
|--------|---------|
| google | v0.1.2  |
|--------|---------|
| k8s    | v0.1.0  |
|--------|---------|
| okta   | v1      |
|--------|---------|</msg>
<msg timestamp="20220719 22:12:19.156" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:19.113" endtime="20220719 22:12:19.156"/>
</kw>
<status status="PASS" starttime="20220719 22:12:19.064" endtime="20220719 22:12:19.157"/>
</kw>
<kw name="Should StackQL Exec Contain JSON output">
<arg>${SHOW_PROVIDERS_STR}</arg>
<arg>okta</arg>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<arg>\-o\=json</arg>
<msg timestamp="20220719 22:12:19.161" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:19.161" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:19.161" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:19.162" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show providers;" -o=json</msg>
<msg timestamp="20220719 22:12:19.171" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:19.223" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:19.223" level="INFO">[{"name":"aws","version":"v0.1.0"},{"name":"github","version":"v0.3.1"},{"name":"google","version":"v0.1.2"},{"name":"k8s","version":"v0.1.0"},{"name":"okta","version":"v1"}]</msg>
<msg timestamp="20220719 22:12:19.223" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:19.159" endtime="20220719 22:12:19.223"/>
</kw>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_CANONICAL_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<arg>\-o\=json</arg>
<msg timestamp="20220719 22:12:19.225" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:19.225" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:19.225" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:19.226" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry\", \"verifyConfig\": {\"nopVerify\": false}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show providers;" -o=json</msg>
<msg timestamp="20220719 22:12:19.236" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:19.285" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:19.285" level="INFO">[{"name":"aws","version":"v0.1.0"},{"name":"github","version":"v0.3.1"},{"name":"google","version":"v0.1.2"},{"name":"k8s","version":"v0.1.0"},{"name":"okta","version":"v1"}]</msg>
<msg timestamp="20220719 22:12:19.285" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:19.224" endtime="20220719 22:12:19.285"/>
</kw>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_DEPRECATED_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<arg>\-o\=json</arg>
<msg timestamp="20220719 22:12:19.289" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:19.289" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:19.289" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:19.289" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-deprecated\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-deprecated\", \"verifyConfig\": {\"nopVerify\": false}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show providers;" -o=json</msg>
<msg timestamp="20220719 22:12:19.297" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:19.328" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:19.328" level="INFO">[{"name":"google","version":"v1"},{"name":"okta","version":"v1"}]</msg>
<msg timestamp="20220719 22:12:19.328" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:19.287" endtime="20220719 22:12:19.329"/>
</kw>
<status status="PASS" starttime="20220719 22:12:19.158" endtime="20220719 22:12:19.329"/>
</kw>
<status status="PASS" starttime="20220719 22:12:18.826" endtime="20220719 22:12:19.330"/>
</test>
<test id="s1-s1-t3" name="Get Providers No Config">
<kw name="Should StackQL No Cfg Exec Contain">
<arg>${SHOW_PROVIDERS_STR}</arg>
<arg>name</arg>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${EMPTY}</arg>
<arg>${EMPTY}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:12:19.346" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:19.346" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:19.346" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:19.347" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec --tls.allowInsecure=true "show providers;"</msg>
<msg timestamp="20220719 22:12:19.357" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:19.393" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:19.393" level="INFO">|------|---------|
| name | version |
|------|---------|</msg>
<msg timestamp="20220719 22:12:19.393" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:19.333" endtime="20220719 22:12:19.393"/>
</kw>
<status status="PASS" starttime="20220719 22:12:19.333" endtime="20220719 22:12:19.394"/>
</kw>
<status status="PASS" starttime="20220719 22:12:19.331" endtime="20220719 22:12:19.395"/>
</test>
<test id="s1-s1-t4" name="Get Okta Services">
<kw name="Should StackQL Exec Contain">
<arg>${SHOW_OKTA_SERVICES_FILTERED_STR}</arg>
<arg>Application${SPACE}API</arg>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:12:19.400" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:19.400" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:19.400" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:19.401" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show services from okta like 'app%';"</msg>
<msg timestamp="20220719 22:12:19.412" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:19.479" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:19.479" level="INFO">|----------------|-------------|-----------------|
|       id       |    name     |      title      |
|----------------|-------------|-----------------|
| application:v1 | application | Application API |
|----------------|-------------|-----------------|</msg>
<msg timestamp="20220719 22:12:19.480" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:19.398" endtime="20220719 22:12:19.480"/>
</kw>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_CANONICAL_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:12:19.483" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:19.483" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:19.483" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:19.484" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry\", \"verifyConfig\": {\"nopVerify\": false}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show services from okta like 'app%';"</msg>
<msg timestamp="20220719 22:12:19.499" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:19.555" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:19.556" level="INFO">|----------------|-------------|-----------------|
|       id       |    name     |      title      |
|----------------|-------------|-----------------|
| application:v1 | application | Application API |
|----------------|-------------|-----------------|</msg>
<msg timestamp="20220719 22:12:19.556" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:19.481" endtime="20220719 22:12:19.556"/>
</kw>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_DEPRECATED_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:12:19.559" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:19.559" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:19.559" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:19.560" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-deprecated\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-deprecated\", \"verifyConfig\": {\"nopVerify\": false}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show services from okta like 'app%';"</msg>
<msg timestamp="20220719 22:12:19.566" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:19.610" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:19.610" level="INFO">|----------------|-------------|-----------------|
|       id       |    name     |      title      |
|----------------|-------------|-----------------|
| application:v1 | application | Application API |
|----------------|-------------|-----------------|</msg>
<msg timestamp="20220719 22:12:19.610" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:19.557" endtime="20220719 22:12:19.610"/>
</kw>
<status status="PASS" starttime="20220719 22:12:19.397" endtime="20220719 22:12:19.611"/>
</kw>
<status status="PASS" starttime="20220719 22:12:19.396" endtime="20220719 22:12:19.611"/>
</test>
<test id="s1-s1-t5" name="Get Okta Application Resources">
<kw name="Should StackQL Exec Contain">
<arg>${SHOW_OKTA_APPLICATION_RESOURCES_FILTERED_STR}</arg>
<arg>grants</arg>
<arg>groups</arg>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:12:19.616" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:19.616" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:19.616" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:19.616" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show resources from okta.application like 'gr%';"</msg>
<msg timestamp="20220719 22:12:19.625" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:19.747" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:19.747" level="INFO">|--------|-------------------------|
|  name  |           id            |
|--------|-------------------------|
| grants | okta.application.grants |
|--------|-------------------------|
| groups | okta.application.groups |
|--------|-------------------------|</msg>
<msg timestamp="20220719 22:12:19.748" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:19.615" endtime="20220719 22:12:19.748"/>
</kw>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_CANONICAL_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:12:19.751" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:19.751" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:19.751" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:19.752" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry\", \"verifyConfig\": {\"nopVerify\": false}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show resources from okta.application like 'gr%';"</msg>
<msg timestamp="20220719 22:12:19.761" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:19.899" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:19.899" level="INFO">|--------|-------------------------|
|  name  |           id            |
|--------|-------------------------|
| grants | okta.application.grants |
|--------|-------------------------|
| groups | okta.application.groups |
|--------|-------------------------|</msg>
<msg timestamp="20220719 22:12:19.899" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:19.749" endtime="20220719 22:12:19.900"/>
</kw>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_DEPRECATED_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:12:19.904" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:19.905" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:19.905" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:19.906" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-deprecated\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-deprecated\", \"verifyConfig\": {\"nopVerify\": false}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show resources from okta.application like 'gr%';"</msg>
<msg timestamp="20220719 22:12:19.918" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:20.119" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:20.119" level="INFO">|--------|-------------------------|
|  name  |           id            |
|--------|-------------------------|
| grants | okta.application.grants |
|--------|-------------------------|
| groups | okta.application.groups |
|--------|-------------------------|</msg>
<msg timestamp="20220719 22:12:20.119" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:19.901" endtime="20220719 22:12:20.120"/>
</kw>
<status status="PASS" starttime="20220719 22:12:19.614" endtime="20220719 22:12:20.121"/>
</kw>
<status status="PASS" starttime="20220719 22:12:19.613" endtime="20220719 22:12:20.123"/>
</test>
<test id="s1-s1-t6" name="Describe GitHub Repos Pages">
<kw name="Should StackQL Novel Exec Contain">
<arg>${DESCRIBE_GITHUB_REPOS_PAGES}</arg>
<arg>https_certificate</arg>
<arg>url</arg>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:12:20.128" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:20.128" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:20.128" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:20.129" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "describe github.repos.pages;"</msg>
<msg timestamp="20220719 22:12:20.138" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:20.569" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:20.569" level="INFO">|------------------------------|---------|
|             name             |  type   |
|------------------------------|---------|
| source                       | object  |
|------------------------------|---------|
| url                          | string  |
|------------------------------|---------|
| protected_domain_state       | string  |
|------------------------------|---------|
| https_enforced               | boolean |
|------------------------------|---------|
| custom_404                   | boolean |
|------------------------------|---------|
| public                       | boolean |
|------------------------------|---------|
| status                       | string  |
|------------------------------|---------|
| https_certificate            | object  |
|------------------------------|---------|
| pending_domain_unverified_at | string  |
|------------------------------|---------|
| html_url                     | string  |
|------------------------------|---------|
| cname                        | string  |
|------------------------------|---------|</msg>
<msg timestamp="20220719 22:12:20.570" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:20.127" endtime="20220719 22:12:20.570"/>
</kw>
<kw name="Should Stackql Exec Inline Contain" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_CANONICAL_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:12:20.573" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:20.573" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:20.573" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:20.573" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry\", \"verifyConfig\": {\"nopVerify\": false}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "describe github.repos.pages;"</msg>
<msg timestamp="20220719 22:12:20.584" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:21.349" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:21.350" level="INFO">|------------------------------|---------|
|             name             |  type   |
|------------------------------|---------|
| cname                        | string  |
|------------------------------|---------|
| https_enforced               | boolean |
|------------------------------|---------|
| html_url                     | string  |
|------------------------------|---------|
| pending_domain_unverified_at | string  |
|------------------------------|---------|
| protected_domain_state       | string  |
|------------------------------|---------|
| status                       | string  |
|------------------------------|---------|
| source                       | object  |
|------------------------------|---------|
| https_certificate            | object  |
|------------------------------|---------|
| url                          | string  |
|------------------------------|---------|
| custom_404                   | boolean |
|------------------------------|---------|
| public                       | boolean |
|------------------------------|---------|</msg>
<msg timestamp="20220719 22:12:21.350" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:20.571" endtime="20220719 22:12:21.350"/>
</kw>
<status status="PASS" starttime="20220719 22:12:20.125" endtime="20220719 22:12:21.351"/>
</kw>
<status status="PASS" starttime="20220719 22:12:20.123" endtime="20220719 22:12:21.352"/>
</test>
<test id="s1-s1-t7" name="Show Methods GitHub">
<kw name="Should StackQL Novel Exec Equal">
<arg>${SHOW_METHODS_GITHUB_REPOS_REPOS}</arg>
<arg>${SHOW_METHODS_GITHUB_REPOS_REPOS_EXPECTED}</arg>
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:12:21.357" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:21.357" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:21.357" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:21.358" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show methods in github.repos.repos;"</msg>
<msg timestamp="20220719 22:12:21.369" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:21.891" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:21.892" level="INFO">|----------------------------------|--------------------------------|---------|
|            MethodName            |         RequiredParams         | SQLVerb |
|----------------------------------|--------------------------------|---------|
| get                              | owner, repo                    | SELECT  |
|----------------------------------|--------------------------------|---------|
| list_for_authenticated_user      |                                | SELECT  |
|----------------------------------|--------------------------------|---------|
| list_for_org                     | org                            | SELECT  |
|----------------------------------|--------------------------------|---------|
| list_for_user                    | username                       | SELECT  |
|----------------------------------|--------------------------------|---------|
| create_for_authenticated_user    | data__name                     | INSERT  |
|----------------------------------|--------------------------------|---------|
| create_in_org                    | org, data__name                | INSERT  |
|----------------------------------|--------------------------------|---------|
| create_using_template            | template_owner, template_repo, | INSERT  |
|                                  | data__name                     |         |
|----------------------------------|--------------------------------|---------|
| delete                           | owner, repo                    | DELETE  |
|----------------------------------|--------------------------------|---------|
| check_vulnerability_alerts       | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|
| codeowners_errors                | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|
| create_dispatch_event            | owner, repo, data__event_type  | EXEC    |
|----------------------------------|--------------------------------|---------|
| disable_automated_security_fixes | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|
| disable_vulnerability_alerts     | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|
| enable_automated_security_fixes  | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|
| enable_vulnerability_alerts      | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|
| transfer                         | owner, repo, data__new_owner   | EXEC    |
|----------------------------------|--------------------------------|---------|
| update                           | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|</msg>
<msg timestamp="20220719 22:12:21.892" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:21.355" endtime="20220719 22:12:21.892"/>
</kw>
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_CANONICAL_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${_EXEC_CMD_STR}</arg>
<arg>${_EXEC_CMD_EXPECTED_OUTPUT}</arg>
<msg timestamp="20220719 22:12:21.896" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:21.896" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:21.896" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:21.897" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry\", \"verifyConfig\": {\"nopVerify\": false}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show methods in github.repos.repos;"</msg>
<msg timestamp="20220719 22:12:21.906" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:22.393" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:22.393" level="INFO">|----------------------------------|--------------------------------|---------|
|            MethodName            |         RequiredParams         | SQLVerb |
|----------------------------------|--------------------------------|---------|
| get                              | owner, repo                    | SELECT  |
|----------------------------------|--------------------------------|---------|
| list_for_authenticated_user      |                                | SELECT  |
|----------------------------------|--------------------------------|---------|
| list_for_org                     | org                            | SELECT  |
|----------------------------------|--------------------------------|---------|
| list_for_user                    | username                       | SELECT  |
|----------------------------------|--------------------------------|---------|
| create_for_authenticated_user    | data__name                     | INSERT  |
|----------------------------------|--------------------------------|---------|
| create_in_org                    | org, data__name                | INSERT  |
|----------------------------------|--------------------------------|---------|
| create_using_template            | template_owner, template_repo, | INSERT  |
|                                  | data__name                     |         |
|----------------------------------|--------------------------------|---------|
| delete                           | owner, repo                    | DELETE  |
|----------------------------------|--------------------------------|---------|
| check_vulnerability_alerts       | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|
| codeowners_errors                | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|
| create_dispatch_event            | owner, repo, data__event_type  | EXEC    |
|----------------------------------|--------------------------------|---------|
| disable_automated_security_fixes | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|
| disable_vulnerability_alerts     | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|
| enable_automated_security_fixes  | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|
| enable_vulnerability_alerts      | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|
| transfer                         | owner, repo, data__new_owner   | EXEC    |
|----------------------------------|--------------------------------|---------|
| update                           | owner, repo                    | EXEC    |
|----------------------------------|--------------------------------|---------|</msg>
<msg timestamp="20220719 22:12:22.393" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:21.893" endtime="20220719 22:12:22.394"/>
</kw>
<status status="PASS" starttime="20220719 22:12:21.354" endtime="20220719 22:12:22.394"/>
</kw>
<status status="PASS" starttime="20220719 22:12:21.353" endtime="20220719 22:12:22.395"/>
</test>
<status status="PASS" starttime="20220719 22:12:18.784" endtime="20220719 22:12:22.397"/>
</suite>
<suite id="s1-s2" name="Stackql Mocked From Cmd Line" source="/Users/admin/stackql/stackql-devel/test/robot/functional/stackql_mocked_from_cmd_line.robot">
<test id="s1-s2-t1" name="Google Container Agg Desc">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_CONTAINER_SUBNET_AGG_DESC}</arg>
<arg>${SELECT_CONTAINER_SUBNET_AGG_DESC_EXPECTED}</arg>
<msg timestamp="20220719 22:12:22.429" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:22.429" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:22.429" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:22.430" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select ipCidrRange, sum(5) cc  from  google.container.`projects.aggregated.usableSubnetworks` where projectsId = 'testing-project' group by \"ipCidrRange\" having sum(5) &gt;= 5 order by ipCidrRange desc;"</msg>
<msg timestamp="20220719 22:12:22.447" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:25.610" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:25.610" level="INFO">|-------------|----|
| ipCidrRange | cc |
|-------------|----|
| 10.0.1.0/24 |  5 |
|-------------|----|
| 10.0.0.0/24 |  5 |
|-------------|----|</msg>
<msg timestamp="20220719 22:12:25.611" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:22.427" endtime="20220719 22:12:25.611"/>
</kw>
<status status="PASS" starttime="20220719 22:12:22.426" endtime="20220719 22:12:25.612"/>
</test>
<test id="s1-s2-t2" name="Google Container Agg Asc">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_CONTAINER_SUBNET_AGG_ASC}</arg>
<arg>${SELECT_CONTAINER_SUBNET_AGG_ASC_EXPECTED}</arg>
<msg timestamp="20220719 22:12:25.616" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:25.616" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:25.616" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:25.617" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select ipCidrRange, sum(5) cc  from  google.container.`projects.aggregated.usableSubnetworks` where projectsId = 'testing-project' group by \"ipCidrRange\" having sum(5) &gt;= 5 order by ipCidrRange asc;"</msg>
<msg timestamp="20220719 22:12:25.627" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:25.860" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:25.860" level="INFO">|-------------|----|
| ipCidrRange | cc |
|-------------|----|
| 10.0.0.0/24 |  5 |
|-------------|----|
| 10.0.1.0/24 |  5 |
|-------------|----|</msg>
<msg timestamp="20220719 22:12:25.860" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:25.614" endtime="20220719 22:12:25.861"/>
</kw>
<status status="PASS" starttime="20220719 22:12:25.613" endtime="20220719 22:12:25.862"/>
</test>
<test id="s1-s2-t3" name="Google IAM Policy Agg">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>\-\-infile\=${GET_IAM_POLICY_AGG_ASC_INPUT_FILE}</arg>
<arg>${GET_IAM_POLICY_AGG_ASC_EXPECTED}</arg>
<arg>\-o\=csv</arg>
<msg timestamp="20220719 22:12:25.866" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:25.866" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:25.866" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:25.866" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true --infile=/Users/admin/stackql/stackql-devel/test/assets/input/select-exec-dependent-org-iam-policy.iql -o=csv</msg>
<msg timestamp="20220719 22:12:25.873" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:26.113" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:26.113" level="INFO">members,roles
"[""user:joeblow@myoutfit.com"",""user:somejimbo@gmail.com""]","roles/owner,roles/resourcemanager.folderAdmin,roles/resourcemanager.organizationAdmin"
"[""user:joeblow@myoutfit.com""]","roles/billing.admin,roles/compute.networkUser,roles/compute.xpnAdmin,roles/container.clusterAdmin,roles/orgpolicy.policyAdmin,roles/resourcemanager.projectCreator"</msg>
<msg timestamp="20220719 22:12:26.113" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:25.864" endtime="20220719 22:12:26.114"/>
</kw>
<status status="PASS" starttime="20220719 22:12:25.862" endtime="20220719 22:12:26.114"/>
</test>
<test id="s1-s2-t4" name="Google Select Project IAM Policy">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_EXPERIMENTAL_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GOOGLE_CLOUDRESOURCEMANAGER_IAMPOLICY}</arg>
<arg>${SELECT_GOOGLE_CLOUDRESOURCEMANAGER_IAMPOLICY_EXPECTED}</arg>
<msg timestamp="20220719 22:12:26.117" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:26.117" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:26.117" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:26.118" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-advanced\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-advanced\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "SELECT role, members, condition from google.cloudresourcemanager.project_iam_policies where projectsId = 'testproject' order by role asc;"</msg>
<msg timestamp="20220719 22:12:26.124" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:26.397" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:26.397" level="INFO">|--------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
|                 role                 |                                                               members                                                                | condition |
|--------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
| roles/appengine.serviceAgent         | ["serviceAccount:service-1231231231230@gcp-gae-service.iam.gserviceaccount.com"]                                                     | null      |
|--------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
| roles/cloudbuild.builds.builder      | ["serviceAccount:1231231231230@cloudbuild.gserviceaccount.com"]                                                                      | null      |
|--------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
| roles/cloudbuild.serviceAgent        | ["serviceAccount:service-1231231231230@gcp-sa-cloudbuild.iam.gserviceaccount.com"]                                                   | null      |
|--------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
| roles/containerregistry.ServiceAgent | ["serviceAccount:service-1231231231230@containerregistry.iam.gserviceaccount.com"]                                                   | null      |
|--------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
| roles/editor                         | ["serviceAccount:testproject@appspot.gserviceaccount.com"]                                                                           | null      |
|--------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
| roles/firebaserules.system           | ["serviceAccount:service-1231231231230@firebase-rules.iam.gserviceaccount.com"]                                                      | null      |
|--------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
| roles/firestore.serviceAgent         | ["serviceAccount:service-1231231231230@gcp-sa-firestore.iam.gserviceaccount.com"]                                                    | null      |
|--------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
| roles/owner                          | ["serviceAccount:testproject-provisioner@testproject.iam.gserviceaccount.com","user:joeblow@testorg.io","user:johnsmith@testorg.io"] | null      |
|--------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
| roles/pubsub.serviceAgent            | ["serviceAccount:service-1231231231230@gcp-sa-pubsub.iam.gserviceaccount.com"]                                                       | null      |
|--------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|</msg>
<msg timestamp="20220719 22:12:26.398" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:26.116" endtime="20220719 22:12:26.398"/>
</kw>
<status status="PASS" starttime="20220719 22:12:26.115" endtime="20220719 22:12:26.399"/>
</test>
<test id="s1-s2-t5" name="Google Select Project IAM Policy Filtered And Verify Like Filtering">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_EXPERIMENTAL_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GOOGLE_CLOUDRESOURCEMANAGER_IAMPOLICY_LIKE_FILTERED}</arg>
<arg>${SELECT_GOOGLE_CLOUDRESOURCEMANAGER_IAMPOLICY_FILTERED_EXPECTED}</arg>
<msg timestamp="20220719 22:12:26.403" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:26.403" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:26.403" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:26.404" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-advanced\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-advanced\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "SELECT role, members, condition from google.cloudresourcemanager.project_iam_policies where projectsId = 'testproject' and role like '%owner' order by role asc;"</msg>
<msg timestamp="20220719 22:12:26.411" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:26.615" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:26.615" level="INFO">|-------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
|    role     |                                                               members                                                                | condition |
|-------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
| roles/owner | ["serviceAccount:testproject-provisioner@testproject.iam.gserviceaccount.com","user:joeblow@testorg.io","user:johnsmith@testorg.io"] | null      |
|-------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|</msg>
<msg timestamp="20220719 22:12:26.615" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:26.401" endtime="20220719 22:12:26.616"/>
</kw>
<status status="PASS" starttime="20220719 22:12:26.400" endtime="20220719 22:12:26.617"/>
</test>
<test id="s1-s2-t6" name="Google Select Project IAM Policy Filtered And Verify Where Filtering">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_EXPERIMENTAL_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GOOGLE_CLOUDRESOURCEMANAGER_IAMPOLICY_COMPARISON_FILTERED}</arg>
<arg>${SELECT_GOOGLE_CLOUDRESOURCEMANAGER_IAMPOLICY_FILTERED_EXPECTED}</arg>
<msg timestamp="20220719 22:12:26.620" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:26.620" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:26.620" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:26.621" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-advanced\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-advanced\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "SELECT role, members, condition from google.cloudresourcemanager.project_iam_policies where projectsId = 'testproject' and role = 'roles/owner' order by role asc;"</msg>
<msg timestamp="20220719 22:12:26.627" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:26.753" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:26.754" level="INFO">|-------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
|    role     |                                                               members                                                                | condition |
|-------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|
| roles/owner | ["serviceAccount:testproject-provisioner@testproject.iam.gserviceaccount.com","user:joeblow@testorg.io","user:johnsmith@testorg.io"] | null      |
|-------------|--------------------------------------------------------------------------------------------------------------------------------------|-----------|</msg>
<msg timestamp="20220719 22:12:26.754" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:26.619" endtime="20220719 22:12:26.754"/>
</kw>
<status status="PASS" starttime="20220719 22:12:26.618" endtime="20220719 22:12:26.755"/>
</test>
<test id="s1-s2-t7" name="Google Join Plus String Concatenated Select Expressions">
<kw name="Should Horrid Query Stackql Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GOOGLE_JOIN_CONCATENATED_SELECT_EXPRESSIONS}</arg>
<arg>${SELECT_GOOGLE_JOIN_CONCATENATED_SELECT_EXPRESSIONS_EXPECTED}</arg>
<arg>/Users/admin/stackql/stackql-devel/test/robot/functional/tmp/Google-Join-Plus-String-Concatenated-Select-Expressions.tmp</arg>
<msg timestamp="20220719 22:12:26.757" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:26.757" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:26.758" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:26.760" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "SELECT i.zone, i.name, i.machineType, i.deletionProtection, '[{\"subnetwork\":\"' || JSON_EXTRACT(i.networkInterfaces, '$[0].subnetwork') || '\"}]', '[{\"boot\": true, \"initializeParams\": { \"diskSizeGb\": \"' || JSON_EXTRACT(i.disks, '$[0].diskSizeGb') || '\", \"sourceImage\": \"' || d.sourceImage || '\"}}]', i.labels FROM google.compute.instances i INNER JOIN google.compute.disks d ON i.name = d.name WHERE i.project = 'testing-project' AND i.zone = 'australia-southeast1-a' AND d.project = 'testing-project' AND d.zone = 'australia-southeast1-a' AND i.name LIKE '%' order by i.name DESC;"</msg>
<msg timestamp="20220719 22:12:26.766" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:28.200" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:28.200" level="INFO">|---------------------------------------------------------------------------------------------|--------------|--------------------------------------------------------------------------------------------------------------------|--------------------|----------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------|----------------------------------------------------|
|                                            zone                                             |     name     |                                                    machineType                                                     | deletionProtection |                                                                    col_1                                                                     |                                                     col_2                                                     |                       labels                       |
|---------------------------------------------------------------------------------------------|--------------|--------------------------------------------------------------------------------------------------------------------|--------------------|----------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------|----------------------------------------------------|
| https://www.googleapis.com/compute/v1/projects/testing-project/zones/australia-southeast1-a | instance-1-c | https://www.googleapis.com/compute/v1/projects/testing-project/zones/australia-southeast1-a/machineTypes/e2-medium | false              | [{"subnetwork":"https://www.googleapis.com/compute/v1/projects/testing-project/regions/australia-southeast1/subnetworks/my-disk-01-indeed"}] | [{"boot": true, "initializeParams": { "diskSizeGb": "10", "sourceImage":                                      | null                                               |
|                                                                                             |              |                                                                                                                    |                    |                                                                                                                                              | "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2004-focal-v20220610"}}] |                                                    |
|---------------------------------------------------------------------------------------------|--------------|--------------------------------------------------------------------------------------------------------------------|--------------------|----------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------|----------------------------------------------------|
| https://www.googleapis.com/compute/v1/projects/testing-project/zones/australia-southeast1-a | instance-1-b | https://www.googleapis.com/compute/v1/projects/testing-project/zones/australia-southeast1-a/machineTypes/e2-medium | false              | [{"subnetwork":"https://www.googleapis.com/compute/v1/projects/testing-project/regions/australia-southeast1/subnetworks/my-disk-01-indeed"}] | [{"boot": true, "initializeParams": { "diskSizeGb": "10", "sourceImage":                                      | {"sha":"219001a1ecac6c17e8e3a45f7c9182341e4cf71b"} |
|                                                                                             |              |                                                                                                                    |                    |                                                                                                                                              | "https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2004-focal-v20220610"}}] |                                                    |
|---------------------------------------------------------------------------------------------|--------------|--------------------------------------------------------------------------------------------------------------------|--------------------|----------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------|----------------------------------------------------|
| https://www.googleapis.com/compute/v1/projects/testing-project/zones/australia-southeast1-a | instance-1   | https://www.googleapis.com/compute/v1/projects/testing-project/zones/australia-southeast1-a/machineTypes/e2-medium | false              | [{"subnetwork":"https://www.googleapis.com/compute/v1/projects/testing-project/regions/australia-southeast1/subnetworks/my-disk-01-indeed"}] | [{"boot": true, "initializeParams": { "diskSizeGb": "10", "sourceImage":                                      | {"sha":"8d5dc38ef71f6249f7090947bb444ace3d5682c3"} |
|                                                                                             |              |                                                                                                                    |                    |                                                                                                                                              | "https://www.googleapis.com/compute/v1/projects/debian-cloud/global/images/debian-11-bullseye-v20220519"}}]   |                                                    |
|---------------------------------------------------------------------------------------------|--------------|--------------------------------------------------------------------------------------------------------------------|--------------------|----------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------|----------------------------------------------------|</msg>
<msg timestamp="20220719 22:12:28.201" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:26.756" endtime="20220719 22:12:28.201"/>
</kw>
<status status="PASS" starttime="20220719 22:12:26.755" endtime="20220719 22:12:28.202"/>
</test>
<test id="s1-s2-t8" name="Google AcceleratorTypes SQL verb pre changeover">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_ACCELERATOR_TYPES_DESC}</arg>
<arg>${SELECT_ACCELERATOR_TYPES_DESC_EXPECTED}</arg>
<msg timestamp="20220719 22:12:28.206" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:28.207" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:28.207" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:28.208" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select  kind, name  from  google.compute.acceleratorTypes where project = 'testing-project' and zone = 'australia-southeast1-a' order by name desc;"</msg>
<msg timestamp="20220719 22:12:28.219" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:28.977" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:28.978" level="INFO">|-------------------------|---------------------|
|          kind           |        name         |
|-------------------------|---------------------|
| compute#acceleratorType | nvidia-tesla-t4-vws |
|-------------------------|---------------------|
| compute#acceleratorType | nvidia-tesla-t4     |
|-------------------------|---------------------|
| compute#acceleratorType | nvidia-tesla-p4-vws |
|-------------------------|---------------------|
| compute#acceleratorType | nvidia-tesla-p4     |
|-------------------------|---------------------|</msg>
<msg timestamp="20220719 22:12:28.978" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:28.204" endtime="20220719 22:12:28.979"/>
</kw>
<status status="PASS" starttime="20220719 22:12:28.203" endtime="20220719 22:12:28.979"/>
</test>
<test id="s1-s2-t9" name="Google Machine Types Select Paginated">
<kw name="Should Horrid Query Stackql Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_MACHINE_TYPES_DESC}</arg>
<arg>${SELECT_MACHINE_TYPES_DESC_EXPECTED}</arg>
<arg>/Users/admin/stackql/stackql-devel/test/robot/functional/tmp/Google-Machine-Types-Select-Paginated.tmp</arg>
<msg timestamp="20220719 22:12:28.984" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:28.984" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:28.984" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:28.986" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select name from google.compute.machineTypes where project = 'testing-project' and zone = 'australia-southeast1-a' order by name desc;"</msg>
<msg timestamp="20220719 22:12:28.997" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:31.537" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:31.540" level="INFO">|--------------------|
|        name        |
|--------------------|
| p9-c2-standard-8   |
|--------------------|
| p9-c2-standard-60  |
|--------------------|
| p9-c2-standard-4   |
|--------------------|
| p9-c2-standard-30  |
|--------------------|
| p9-c2-standard-16  |
|--------------------|
| p8-c2-standard-8   |
|--------------------|
| p8-c2-standard-60  |
|--------------------|
| p8-c2-standard-4   |
|--------------------|
| p8-c2-standard-30  |
|--------------------|
| p8-c2-standard-16  |
|--------------------|
| p7-c2-standard-8   |
|--------------------|
| p7-c2-standard-60  |
|--------------------|
| p7-c2-standard-4   |
|--------------------|
| p7-c2-standard-30  |
|--------------------|
| p7-c2-standard-16  |
|--------------------|
| p6-c2-standard-8   |
|--------------------|
| p6-c2-standard-60  |
|--------------------|
| p6-c2-standard-4   |
|--------------------|
| p6-c2-standard-30  |
|--------------------|
| p6-c2-standard-16  |
|--------------------|
| p5-c2-standard-8   |
|--------------------|
| p5-c2-standard-60  |
|--------------------|
| p5-c2-standard-4   |
|--------------------|
| p5-c2-standard-30  |
|--------------------|
| p5-c2-standard-16  |
|--------------------|
| p4-c2-standard-8   |
|--------------------|
| p4-c2-standard-60  |
|--------------------|
| p4-c2-standard-4   |
|--------------------|
| p4-c2-standard-30  |
|--------------------|
| p4-c2-standard-16  |
|--------------------|
| p3-c2-standard-8   |
|--------------------|
| p3-c2-standard-60  |
|--------------------|
| p3-c2-standard-4   |
|--------------------|
| p3-c2-standard-30  |
|--------------------|
| p3-c2-standard-16  |
|--------------------|
| p20-c2-standard-8  |
|--------------------|
| p20-c2-standard-60 |
|--------------------|
| p20-c2-standard-4  |
|--------------------|
| p20-c2-standard-30 |
|--------------------|
| p20-c2-standard-16 |
|--------------------|
| p2-c2-standard-8   |
|--------------------|
| p2-c2-standard-60  |
|--------------------|
| p2-c2-standard-4   |
|--------------------|
| p2-c2-standard-30  |
|--------------------|
| p2-c2-standard-16  |
|--------------------|
| p19-c2-standard-8  |
|--------------------|
| p19-c2-standard-60 |
|--------------------|
| p19-c2-standard-4  |
|--------------------|
| p19-c2-standard-30 |
|--------------------|
| p19-c2-standard-16 |
|--------------------|
| p18-c2-standard-8  |
|--------------------|
| p18-c2-standard-60 |
|--------------------|
| p18-c2-standard-4  |
|--------------------|
| p18-c2-standard-30 |
|--------------------|
| p18-c2-standard-16 |
|--------------------|
| p17-c2-standard-8  |
|--------------------|
| p17-c2-standard-60 |
|--------------------|
| p17-c2-standard-4  |
|--------------------|
| p17-c2-standard-30 |
|--------------------|
| p17-c2-standard-16 |
|--------------------|
| p16-c2-standard-8  |
|--------------------|
| p16-c2-standard-60 |
|--------------------|
| p16-c2-standard-4  |
|--------------------|
| p16-c2-standard-30 |
|--------------------|
| p16-c2-standard-16 |
|--------------------|
| p15-c2-standard-8  |
|--------------------|
| p15-c2-standard-60 |
|--------------------|
| p15-c2-standard-4  |
|--------------------|
| p15-c2-standard-30 |
|--------------------|
| p15-c2-standard-16 |
|--------------------|
| p14-c2-standard-8  |
|--------------------|
| p14-c2-standard-60 |
|--------------------|
| p14-c2-standard-4  |
|--------------------|
| p14-c2-standard-30 |
|--------------------|
| p14-c2-standard-16 |
|--------------------|
| p13-c2-standard-8  |
|--------------------|
| p13-c2-standard-60 |
|--------------------|
| p13-c2-standard-4  |
|--------------------|
| p13-c2-standard-30 |
|--------------------|
| p13-c2-standard-16 |
|--------------------|
| p12-c2-standard-8  |
|--------------------|
| p12-c2-standard-60 |
|--------------------|
| p12-c2-standard-4  |
|--------------------|
| p12-c2-standard-30 |
|--------------------|
| p12-c2-standard-16 |
|--------------------|
| p11-c2-standard-8  |
|--------------------|
| p11-c2-standard-60 |
|--------------------|
| p11-c2-standard-4  |
|--------------------|
| p11-c2-standard-30 |
|--------------------|
| p11-c2-standard-16 |
|--------------------|
| p10-c2-standard-8  |
|--------------------|
| p10-c2-standard-60 |
|--------------------|
| p10-c2-standard-4  |
|--------------------|
| p10-c2-standard-30 |
|--------------------|
| p10-c2-standard-16 |
|--------------------|
| p1-c2-standard-8   |
|--------------------|
| p1-c2-standard-60  |
|--------------------|
| p1-c2-standard-4   |
|--------------------|
| p1-c2-standard-30  |
|--------------------|
| p1-c2-standard-16  |
|--------------------|</msg>
<msg timestamp="20220719 22:12:31.541" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:28.982" endtime="20220719 22:12:31.541"/>
</kw>
<status status="PASS" starttime="20220719 22:12:28.980" endtime="20220719 22:12:31.542"/>
</test>
<test id="s1-s2-t10" name="Google AcceleratorTypes SQL verb post changeover">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_SQL_VERB_CONTRIVED_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_ACCELERATOR_TYPES_DESC}</arg>
<arg>${SELECT_ACCELERATOR_TYPES_DESC_EXPECTED}</arg>
<msg timestamp="20220719 22:12:31.545" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:31.545" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:31.545" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:31.546" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry\", \"srcPrefix\": \"registry-verb-matching-src\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select  kind, name  from  google.compute.acceleratorTypes where project = 'testing-project' and zone = 'australia-southeast1-a' order by name desc;"</msg>
<msg timestamp="20220719 22:12:31.556" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:32.314" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:32.314" level="INFO">|-------------------------|---------------------|
|          kind           |        name         |
|-------------------------|---------------------|
| compute#acceleratorType | nvidia-tesla-t4-vws |
|-------------------------|---------------------|
| compute#acceleratorType | nvidia-tesla-t4     |
|-------------------------|---------------------|
| compute#acceleratorType | nvidia-tesla-p4-vws |
|-------------------------|---------------------|
| compute#acceleratorType | nvidia-tesla-p4     |
|-------------------------|---------------------|</msg>
<msg timestamp="20220719 22:12:32.314" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:31.544" endtime="20220719 22:12:32.315"/>
</kw>
<status status="PASS" starttime="20220719 22:12:31.543" endtime="20220719 22:12:32.316"/>
</test>
<test id="s1-s2-t11" name="Okta Apps Select Simple">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_OKTA_APPS}</arg>
<arg>${SELECT_OKTA_APPS_ASC_EXPECTED}</arg>
<msg timestamp="20220719 22:12:32.323" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:32.324" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:32.324" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:32.324" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select name, status, label, id from okta.application.apps apps where apps.subdomain = 'example-subdomain' order by name asc;"</msg>
<msg timestamp="20220719 22:12:32.331" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:33.832" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:33.832" level="INFO">|---------------------|----------|---------------------|----------------------|
|        name         |  status  |        label        |          id          |
|---------------------|----------|---------------------|----------------------|
| oidc_client         | ACTIVE   | demo-disk-xx4       | 0oa3fwm4zsW5jR5V55d7 |
|---------------------|----------|---------------------|----------------------|
| okta_browser_plugin | ACTIVE   | Okta Browser Plugin | 0oa3cy8k83is5uMwh5d7 |
|---------------------|----------|---------------------|----------------------|
| okta_enduser        | ACTIVE   | Okta Dashboard      | 0oa3cy8k8zaX4fKl15d7 |
|---------------------|----------|---------------------|----------------------|
| saasure             | ACTIVE   | Okta Admin Console  | 0oa3cy8k41YM15j4H5d7 |
|---------------------|----------|---------------------|----------------------|
| template_basic_auth | INACTIVE | demo-disk-xx5       | 0oa3pssr5jYavmnNF5d7 |
|---------------------|----------|---------------------|----------------------|</msg>
<msg timestamp="20220719 22:12:33.832" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:32.322" endtime="20220719 22:12:33.833"/>
</kw>
<status status="PASS" starttime="20220719 22:12:32.321" endtime="20220719 22:12:33.834"/>
</test>
<test id="s1-s2-t12" name="AWS Volumes Select Simple">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_AWS_VOLUMES}</arg>
<arg>${SELECT_AWS_VOLUMES_ASC_EXPECTED}</arg>
<msg timestamp="20220719 22:12:33.838" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:33.839" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:33.839" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:33.839" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select VolumeId, Encrypted, Size from aws.ec2.volumes where region = 'ap-southeast-1' order by VolumeId asc;"</msg>
<msg timestamp="20220719 22:12:33.848" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:36.426" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:36.427" level="INFO">|-----------------------|-----------|------|
|       VolumeId        | Encrypted | Size |
|-----------------------|-----------|------|
| vol-00100000000000000 | false     |   10 |
|-----------------------|-----------|------|
| vol-00200000000000000 | false     |    8 |
|-----------------------|-----------|------|</msg>
<msg timestamp="20220719 22:12:36.427" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:33.836" endtime="20220719 22:12:36.427"/>
</kw>
<status status="PASS" starttime="20220719 22:12:33.835" endtime="20220719 22:12:36.428"/>
</test>
<test id="s1-s2-t13" name="AWS Volume Insert Simple">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${CREATE_AWS_VOLUME}</arg>
<arg>The operation completed successfully</arg>
<msg timestamp="20220719 22:12:36.433" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:36.433" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:36.434" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:36.434" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "insert into aws.ec2.volumes(AvailabilityZone, Size, region) select 'ap-southeast-1a', 10, 'ap-southeast-1';"</msg>
<msg timestamp="20220719 22:12:36.441" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:38.051" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:38.052" level="INFO">The operation completed successfully</msg>
<msg timestamp="20220719 22:12:38.052" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:36.431" endtime="20220719 22:12:38.052"/>
</kw>
<status status="PASS" starttime="20220719 22:12:36.429" endtime="20220719 22:12:38.053"/>
</test>
<test id="s1-s2-t14" name="GitHub Pages Select Top Level Object">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GITHUB_REPOS_PAGES_SINGLE}</arg>
<arg>${SELECT_GITHUB_REPOS_PAGES_SINGLE_EXPECTED}</arg>
<msg timestamp="20220719 22:12:38.057" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:38.057" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:38.057" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:38.058" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select url from github.repos.pages where owner = 'dummyorg' and repo = 'dummyapp.io';"</msg>
<msg timestamp="20220719 22:12:38.064" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:39.925" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:39.926" level="INFO">|---------------------------------------------------------|
|                           url                           |
|---------------------------------------------------------|
| https://api.github.com/repos/dummyorg/dummyapp.io/pages |
|---------------------------------------------------------|</msg>
<msg timestamp="20220719 22:12:39.926" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:38.055" endtime="20220719 22:12:39.926"/>
</kw>
<status status="PASS" starttime="20220719 22:12:38.053" endtime="20220719 22:12:39.927"/>
</test>
<test id="s1-s2-t15" name="GitHub Scim Users Select">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GITHUB_SCIM_USERS}</arg>
<arg>${SELECT_GITHUB_SCIM_USERS_EXPECTED}</arg>
<msg timestamp="20220719 22:12:39.931" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:39.931" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:39.931" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:39.932" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select JSON_EXTRACT(name, '$.givenName') || ' ' || JSON_EXTRACT(name, '$.familyName') as name, userName, externalId, id from github.scim.users where org = 'dummyorg' order by id asc;"</msg>
<msg timestamp="20220719 22:12:39.939" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:40.061" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:40.061" level="INFO">|--------------|----------------------|----------------------|--------------------------------------|
|     name     |       userName       |      externalId      |                  id                  |
|--------------|----------------------|----------------------|--------------------------------------|
| Mona Octocat | octocat@github.com   | 00u1dhhb1fkIGP7RL1d8 | 5fc0c238-1112-11e8-8e45-920c87bdbd75 |
|--------------|----------------------|----------------------|--------------------------------------|
| Crazy Dude   | crazydude@github.com | 00u1dhhb1fkIGP7RL1d9 | 5fc0c238-1112-11e8-8e45-920c87bdbd76 |
|--------------|----------------------|----------------------|--------------------------------------|</msg>
<msg timestamp="20220719 22:12:40.061" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:39.929" endtime="20220719 22:12:40.062"/>
</kw>
<status status="PASS" starttime="20220719 22:12:39.928" endtime="20220719 22:12:40.063"/>
</test>
<test id="s1-s2-t16" name="GitHub Branch Names Paginated Select">
<kw name="Should Horrid Query Stackql Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GITHUB_BRANCHES_NAMES_DESC}</arg>
<arg>${SELECT_GITHUB_BRANCHES_NAMES_DESC_EXPECTED}</arg>
<arg>/Users/admin/stackql/stackql-devel/test/robot/functional/tmp/GitHub-Branch-Names-Paginated-Select.tmp</arg>
<msg timestamp="20220719 22:12:40.066" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:40.066" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:40.067" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:40.068" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select name from github.repos.branches where owner = 'dummyorg' and repo = 'dummyapp.io' order by name desc;"</msg>
<msg timestamp="20220719 22:12:40.076" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:40.528" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:40.529" level="INFO">|------------------------------|
|             name             |
|------------------------------|
| feature/flow-control-rebased |
|------------------------------|
| feature/flow-control         |
|------------------------------|
| bugfix/select-schema-default |
|------------------------------|
| bugfix/nil-check             |
|------------------------------|</msg>
<msg timestamp="20220719 22:12:40.529" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:40.065" endtime="20220719 22:12:40.529"/>
</kw>
<status status="PASS" starttime="20220719 22:12:40.063" endtime="20220719 22:12:40.530"/>
</test>
<test id="s1-s2-t17" name="GitHub Tags Paginated Count">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GITHUB_TAGS_COUNT}</arg>
<arg>${SELECT_GITHUB_TAGS_COUNT_EXPECTED}</arg>
<msg timestamp="20220719 22:12:40.534" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:40.534" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:40.534" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:40.534" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select count(*) as ct from github.repos.tags where owner = 'dummyorg' and repo = 'dummyapp.io';"</msg>
<msg timestamp="20220719 22:12:40.543" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:42.188" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:42.189" level="INFO">|-----|
| ct  |
|-----|
| 600 |
|-----|</msg>
<msg timestamp="20220719 22:12:42.189" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:40.532" endtime="20220719 22:12:42.190"/>
</kw>
<status status="PASS" starttime="20220719 22:12:40.531" endtime="20220719 22:12:42.191"/>
</test>
<test id="s1-s2-t18" name="GitHub Repository IDs Select">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GITHUB_REPOS_IDS_ASC}</arg>
<arg>${SELECT_GITHUB_REPOS_IDS_ASC_EXPECTED}</arg>
<msg timestamp="20220719 22:12:42.196" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:42.196" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:42.196" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:42.197" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select id from github.repos.repos where org = 'dummyorg' order by id ASC;"</msg>
<msg timestamp="20220719 22:12:42.204" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:42.464" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:42.464" level="INFO">|-----------|
|    id     |
|-----------|
| 100000001 |
|-----------|
| 100000002 |
|-----------|
| 100000003 |
|-----------|</msg>
<msg timestamp="20220719 22:12:42.464" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:42.194" endtime="20220719 22:12:42.465"/>
</kw>
<status status="PASS" starttime="20220719 22:12:42.192" endtime="20220719 22:12:42.466"/>
</test>
<test id="s1-s2-t19" name="Filter on Implicit Selectable Object">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GITHUB_REPOS_FILTERED_SINGLE}</arg>
<arg>${SELECT_GITHUB_REPOS_FILTERED_SINGLE_EXPECTED}</arg>
<msg timestamp="20220719 22:12:42.468" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:42.468" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:42.468" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:42.469" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select id, name from github.repos.repos where org = 'dummyorg' and name = 'dummyapp.io';"</msg>
<msg timestamp="20220719 22:12:42.476" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:42.747" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:42.748" level="INFO">|-----------|-------------|
|    id     |    name     |
|-----------|-------------|
| 100000002 | dummyapp.io |
|-----------|-------------|</msg>
<msg timestamp="20220719 22:12:42.748" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:42.467" endtime="20220719 22:12:42.748"/>
</kw>
<status status="PASS" starttime="20220719 22:12:42.466" endtime="20220719 22:12:42.749"/>
</test>
<test id="s1-s2-t20" name="Join GCP Okta Cross Provider">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_CONTRIVED_GCP_OKTA_JOIN}</arg>
<arg>${SELECT_CONTRIVED_GCP_OKTA_JOIN_EXPECTED}</arg>
<msg timestamp="20220719 22:12:42.753" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:42.753" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:42.753" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:42.754" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select d1.name, d1.id, d2.name as d2_name, d2.status, d2.label, d2.id as d2_id from google.compute.disks d1 inner join okta.application.apps d2 on d1.name = d2.label where d1.project = 'testing-project' and d1.zone = 'australia-southeast1-b' and d2.subdomain = 'dev-79923018-admin' order by d1.name ASC;"</msg>
<msg timestamp="20220719 22:12:42.762" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:43.291" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:43.291" level="INFO">|---------------|---------------------|---------------------|----------|---------------|----------------------|
|     name      |         id          |       d2_name       |  status  |     label     |        d2_id         |
|---------------|---------------------|---------------------|----------|---------------|----------------------|
| demo-disk-xx4 | 3236826943903762399 | oidc_client         | ACTIVE   | demo-disk-xx4 | 0oa3fwm4zsW5jR5V55d7 |
|---------------|---------------------|---------------------|----------|---------------|----------------------|
| demo-disk-xx5 | 3236826943903762400 | template_basic_auth | INACTIVE | demo-disk-xx5 | 0oa3pssr5jYavmnNF5d7 |
|---------------|---------------------|---------------------|----------|---------------|----------------------|</msg>
<msg timestamp="20220719 22:12:43.292" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:42.751" endtime="20220719 22:12:43.292"/>
</kw>
<status status="PASS" starttime="20220719 22:12:42.750" endtime="20220719 22:12:43.293"/>
</test>
<test id="s1-s2-t21" name="Join GCP Okta Cross Provider JSON Dependent Keyword in Table Name">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_CONTRIVED_GCP_GITHUB_JSON_DEPENDENT_JOIN}</arg>
<arg>${SELECT_CONTRIVED_GCP_GITHUB_JSON_DEPENDENT_JOIN_EXPECTED}</arg>
<msg timestamp="20220719 22:12:43.297" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:43.297" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:43.297" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:43.297" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "SELECT i.name as instance_name, i.status as instance_status, c.sha as commit_sha, JSON_EXTRACT(c.commit, '$.author.email') as author_email, DATE(JSON_EXTRACT(c.commit, '$.author.date')) as commit_date FROM github.repos.commits c INNER JOIN google.compute.instances i ON JSON_EXTRACT(i.labels, '$.sha') = c.sha WHERE c.owner = 'dummyorg' AND c.repo = 'dummyapp.io' AND i.project = 'testing-project' AND i.zone = 'australia-southeast1-a';"</msg>
<msg timestamp="20220719 22:12:43.304" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:44.333" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:44.333" level="INFO">|---------------|-----------------|------------------------------------------|---------------------|-------------|
| instance_name | instance_status |                commit_sha                |    author_email     | commit_date |
|---------------|-----------------|------------------------------------------|---------------------|-------------|
| instance-1    | RUNNING         | 8d5dc38ef71f6249f7090947bb444ace3d5682c3 | joeblow@example.com | 2022-06-12  |
|---------------|-----------------|------------------------------------------|---------------------|-------------|
| instance-1-b  | RUNNING         | 219001a1ecac6c17e8e3a45f7c9182341e4cf71b | joeblow@example.com | 2022-06-12  |
|---------------|-----------------|------------------------------------------|---------------------|-------------|</msg>
<msg timestamp="20220719 22:12:44.333" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:43.295" endtime="20220719 22:12:44.334"/>
</kw>
<status status="PASS" starttime="20220719 22:12:43.294" endtime="20220719 22:12:44.334"/>
</test>
<test id="s1-s2-t22" name="Join GCP Three Way">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_CONTRIVED_GCP_THREE_WAY_JOIN}</arg>
<arg>${SELECT_CONTRIVED_GCP_THREE_WAY_JOIN_EXPECTED}</arg>
<msg timestamp="20220719 22:12:44.337" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:44.337" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:44.337" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:44.338" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select d1.name as n, d1.id, n1.description, s1.description as s1_description from google.compute.disks d1 inner join google.compute.networks n1 on d1.name = n1.name inner join google.compute.subnetworks s1 on d1.name = s1.name where d1.project = 'testing-project' and d1.zone = 'australia-southeast1-b' and n1.project = 'testing-project' and s1.project = 'testing-project' and s1.region = 'australia-southeast1' ;"</msg>
<msg timestamp="20220719 22:12:44.345" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:45.453" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:45.453" level="INFO">|---------------|---------------------|-------------------|------------------|
|       n       |         id          |    description    |  s1_description  |
|---------------|---------------------|-------------------|------------------|
| demo-disk-xx5 | 3236826943903762400 | matchable network | matchable subnet |
|---------------|---------------------|-------------------|------------------|</msg>
<msg timestamp="20220719 22:12:45.453" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:44.336" endtime="20220719 22:12:45.454"/>
</kw>
<status status="PASS" starttime="20220719 22:12:44.335" endtime="20220719 22:12:45.455"/>
</test>
<test id="s1-s2-t23" name="Join GCP Self">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_CONTRIVED_GCP_SELF_JOIN}</arg>
<arg>${SELECT_CONTRIVED_GCP_SELF_JOIN_EXPECTED}</arg>
<msg timestamp="20220719 22:12:45.458" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:45.458" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:45.458" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:45.459" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select d1.name as n, d1.id, d2.id as d2_id from google.compute.disks d1 inner join google.compute.disks d2 on d1.id = d2.id where d1.project = 'testing-project' and d1.zone = 'australia-southeast1-b' and d2.project = 'testing-project' and d2.zone = 'australia-southeast1-b' order by d1.name ASC;"</msg>
<msg timestamp="20220719 22:12:45.465" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:45.935" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:45.935" level="INFO">|---------------|---------------------|---------------------|
|       n       |         id          |        d2_id        |
|---------------|---------------------|---------------------|
| demo-disk-qq1 | 6957941705271944342 | 6957941705271944342 |
|---------------|---------------------|---------------------|
| demo-disk-qq2 | 1624656788334582894 | 1624656788334582894 |
|---------------|---------------------|---------------------|
| demo-disk-xx2 | 3236826943903762397 | 3236826943903762397 |
|---------------|---------------------|---------------------|
| demo-disk-xx3 | 3236826943903762398 | 3236826943903762398 |
|---------------|---------------------|---------------------|
| demo-disk-xx4 | 3236826943903762399 | 3236826943903762399 |
|---------------|---------------------|---------------------|
| demo-disk-xx5 | 3236826943903762400 | 3236826943903762400 |
|---------------|---------------------|---------------------|</msg>
<msg timestamp="20220719 22:12:45.935" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:45.457" endtime="20220719 22:12:45.936"/>
</kw>
<status status="PASS" starttime="20220719 22:12:45.456" endtime="20220719 22:12:45.937"/>
</test>
<test id="s1-s2-t24" name="K8S Nodes Select Leveraging JSON Path">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_K8S_NODES_ASC}</arg>
<arg>${SELECT_K8S_NODES_ASC_EXPECTED}</arg>
<msg timestamp="20220719 22:12:45.941" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:45.941" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:45.941" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:45.941" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select name, uid, creationTimestamp from k8s.core_v1.node where cluster_addr = '127.0.0.1:1092' order by name asc;"</msg>
<msg timestamp="20220719 22:12:45.951" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:47.662" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:47.662" level="INFO">|-----------------------------------------------------|--------------------------------------|----------------------|
|                        name                         |                 uid                  |  creationTimestamp   |
|-----------------------------------------------------|--------------------------------------|----------------------|
| eg0-demok8s-demo-cluster-default-pool-9f8f9edf-ivzy | d5626684-69a3-4644-bf2b-a8e67bb44b01 | 2022-05-26T19:18:31Z |
|-----------------------------------------------------|--------------------------------------|----------------------|
| eg0-demok8s-demo-cluster-default-pool-9f8f9edf-vyi1 | b5bae525-1c4d-4c5f-a42d-512a4420cb57 | 2022-05-26T19:22:07Z |
|-----------------------------------------------------|--------------------------------------|----------------------|
| eg0-demok8s-demo-cluster-default-pool-9f8f9edf-ws25 | 5ca798ab-474c-43ea-a8bc-9bc98fa698bc | 2022-05-26T19:14:58Z |
|-----------------------------------------------------|--------------------------------------|----------------------|</msg>
<msg timestamp="20220719 22:12:47.662" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:45.939" endtime="20220719 22:12:47.663"/>
</kw>
<status status="PASS" starttime="20220719 22:12:45.938" endtime="20220719 22:12:47.664"/>
</test>
<test id="s1-s2-t25" name="Google Compute Instance IAM Policy Select">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GOOGLE_COMPUTE_INSTANCE_IAM_POLICY}</arg>
<arg>${SELECT_GOOGLE_COMPUTE_INSTANCE_IAM_POLICY_EXPECTED}</arg>
<msg timestamp="20220719 22:12:47.667" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:47.667" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:47.667" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:47.668" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "SELECT eTag FROM google.compute.instances_iam_policies WHERE project = 'testing-project' AND zone = 'australia-southeast1-a' AND resource = '000000001';"</msg>
<msg timestamp="20220719 22:12:47.674" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:48.458" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:48.458" level="INFO">|------|
| eTag |
|------|
| ACAB |
|------|</msg>
<msg timestamp="20220719 22:12:48.459" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:47.665" endtime="20220719 22:12:48.459"/>
</kw>
<status status="PASS" starttime="20220719 22:12:47.664" endtime="20220719 22:12:48.460"/>
</test>
<test id="s1-s2-t26" name="Google IAM Policy Show Insert">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SHOW_INSERT_GOOGLE_IAM_SERVICE_ACCOUNTS}</arg>
<arg>${SHOW_INSERT_GOOGLE_IAM_SERVICE_ACCOUNTS_EXPECTED}</arg>
<msg timestamp="20220719 22:12:48.462" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:48.462" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:48.462" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:48.462" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show insert into google.iam.service_accounts;"</msg>
<msg timestamp="20220719 22:12:48.468" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:48.558" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:48.558" level="INFO">|---------------------------------------------|
|              insert_statement               |
|---------------------------------------------|
| INSERT INTO google.iam.service_accounts(    |
|   projectsId,   data__accountId,            |
|   data__serviceAccount ) SELECT             |
|   '{{ .values.projectsId }}',               |
|   '{{ .values.data__accountId               |
| }}',   '{ "description": "{{                |
| .values.data__serviceAccount.description    |
| }}", "disabled": {{                         |
| .values.data__serviceAccount.disabled       |
| }}, "displayName": "{{                      |
| .values.data__serviceAccount.displayName    |
| }}", "email": "{{                           |
| .values.data__serviceAccount.email          |
| }}", "etag": "{{                            |
| .values.data__serviceAccount.etag           |
| }}", "name": "{{                            |
| .values.data__serviceAccount.name           |
| }}", "oauth2ClientId": "{{                  |
| .values.data__serviceAccount.oauth2ClientId |
| }}", "projectId": "{{                       |
| .values.data__serviceAccount.projectId      |
| }}", "uniqueId": "{{                        |
| .values.data__serviceAccount.uniqueId }}"   |
| }' ;                                        |
|---------------------------------------------|</msg>
<msg timestamp="20220719 22:12:48.559" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:48.461" endtime="20220719 22:12:48.559"/>
</kw>
<status status="PASS" starttime="20220719 22:12:48.460" endtime="20220719 22:12:48.560"/>
</test>
<test id="s1-s2-t27" name="Google Compute Instance IAM Policy Show Insert Error">
<kw name="Should Stackql Exec Inline Equal Stderr" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SHOW_INSERT_GOOGLE_COMPUTE_INSTANCE_IAM_POLICY_ERROR}</arg>
<arg>${SHOW_INSERT_GOOGLE_COMPUTE_INSTANCE_IAM_POLICY_ERROR_EXPECTED}</arg>
<msg timestamp="20220719 22:12:48.563" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:48.563" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:48.563" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:48.563" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "show insert into google.compute.instances_iam_policies;"</msg>
<msg timestamp="20220719 22:12:48.569" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:49.268" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:49.269" level="INFO"/>
<msg timestamp="20220719 22:12:49.269" level="INFO">Cannot find matching operation, possible causes include missing required parameters or an unsupported method for the resource, to find required parameters for supported methods run SHOW METHODS IN google.compute.instances_iam_policies: cannot resolve Method</msg>
<status status="PASS" starttime="20220719 22:12:48.562" endtime="20220719 22:12:49.269"/>
</kw>
<status status="PASS" starttime="20220719 22:12:48.561" endtime="20220719 22:12:49.270"/>
</test>
<test id="s1-s2-t28" name="Registry List All">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_MOCKED_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${REGISTRY_LIST}</arg>
<arg>${REGISTRY_LIST_EXPECTED}</arg>
<msg timestamp="20220719 22:12:49.273" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:49.273" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:49.273" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:49.274" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"http://localhost:1094/gh/stackql/stackql-provider-registry/main/providers\", \"verifyConfig\": {\"nopVerify\": false}, \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/robot/variables/registry/mocked\"}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "registry list;"</msg>
<msg timestamp="20220719 22:12:49.280" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:49.666" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:49.667" level="INFO">|----------|---------|
| provider | version |
|----------|---------|
| github   | v0.3.0  |
|----------|---------|
| google   | v0.1.2  |
|----------|---------|
| netlify  | v0.2.0  |
|----------|---------|
| okta     | v0.1.0  |
|----------|---------|</msg>
<msg timestamp="20220719 22:12:49.667" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:49.272" endtime="20220719 22:12:49.667"/>
</kw>
<status status="PASS" starttime="20220719 22:12:49.271" endtime="20220719 22:12:49.668"/>
</test>
<test id="s1-s2-t29" name="Registry List Google Provider">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_MOCKED_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${REGISTRY_GOOGLE_PROVIDER_LIST}</arg>
<arg>${REGISTRY_GOOGLE_PROVIDER_LIST_EXPECTED}</arg>
<msg timestamp="20220719 22:12:49.672" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:49.672" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:49.672" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:49.673" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"http://localhost:1094/gh/stackql/stackql-provider-registry/main/providers\", \"verifyConfig\": {\"nopVerify\": false}, \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/robot/variables/registry/mocked\"}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "registry list google;"</msg>
<msg timestamp="20220719 22:12:49.679" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:49.730" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:49.730" level="INFO">|----------|------------------------|
| provider |        versions        |
|----------|------------------------|
| google   | v0.1.0, v0.1.1, v0.1.2 |
|----------|------------------------|</msg>
<msg timestamp="20220719 22:12:49.731" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:49.670" endtime="20220719 22:12:49.731"/>
</kw>
<status status="PASS" starttime="20220719 22:12:49.669" endtime="20220719 22:12:49.732"/>
</test>
<test id="s1-s2-t30" name="Data Flow Sequential Join Paginated Select Github">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GITHUB_JOIN_DATA_FLOW_SEQUENTIAL}</arg>
<arg>${SELECT_GITHUB_JOIN_DATA_FLOW_SEQUENTIAL_EXPECTED}</arg>
<msg timestamp="20220719 22:12:49.735" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:49.735" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:49.735" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:49.735" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select u.name, om.login, u.two_factor_authentication AS is_two_fa_enabled from github.orgs.members om inner join github.users.users u on om.login = u.login AND u.username = om.login where om.org = 'dummyorg' order by u.name desc;"</msg>
<msg timestamp="20220719 22:12:49.743" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:50.481" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:50.481" level="INFO">|-----------------------|--------------|-------------------|
|         name          |    login     | is_two_fa_enabled |
|-----------------------|--------------|-------------------|
| monalisa octocat-4    | octocat-4    | null              |
|-----------------------|--------------|-------------------|
| monalisa octocat-3    | octocat-3    | null              |
|-----------------------|--------------|-------------------|
| monalisa octocat-2    | octocat-2    | null              |
|-----------------------|--------------|-------------------|
| monalisa octocat-1    | octocat-1    | null              |
|-----------------------|--------------|-------------------|
| monalisa mrfootball-4 | mrfootball-4 | null              |
|-----------------------|--------------|-------------------|
| monalisa mrfootball-3 | mrfootball-3 | null              |
|-----------------------|--------------|-------------------|
| monalisa mrfootball-2 | mrfootball-2 | null              |
|-----------------------|--------------|-------------------|
| monalisa mrfootball-1 | mrfootball-1 | null              |
|-----------------------|--------------|-------------------|
| monalisa knuckles-4   | knuckles-4   | null              |
|-----------------------|--------------|-------------------|
| monalisa knuckles-3   | knuckles-3   | null              |
|-----------------------|--------------|-------------------|
| monalisa knuckles-2   | knuckles-2   | null              |
|-----------------------|--------------|-------------------|
| monalisa knuckles-1   | knuckles-1   | null              |
|-----------------------|--------------|-------------------|
| monalisa decapod-4    | decapod-4    | null              |
|-----------------------|--------------|-------------------|
| monalisa decapod-3    | decapod-3    | null              |
|-----------------------|--------------|-------------------|
| monalisa decapod-2    | decapod-2    | null              |
|-----------------------|--------------|-------------------|
| monalisa decapod-1    | decapod-1    | null              |
|-----------------------|--------------|-------------------|</msg>
<msg timestamp="20220719 22:12:50.481" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:49.734" endtime="20220719 22:12:50.482"/>
</kw>
<status status="PASS" starttime="20220719 22:12:49.732" endtime="20220719 22:12:50.483"/>
</test>
<test id="s1-s2-t31" name="Data Flow Sequential Join Select With Functions Github">
<kw name="Should Stackql Exec Inline Equal" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GITHUB_SCIM_JOIN_WITH_FUNCTIONS}</arg>
<arg>${SELECT_GITHUB_SCIM_JOIN_WITH_FUNCTIONS_EXPECTED}</arg>
<msg timestamp="20220719 22:12:50.488" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:50.488" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:50.488" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:50.489" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select substr(su.userName, 1, instr(su.userName, '@') - 1), su.externalId, su.id, u.login, u.two_factor_authentication AS is_two_fa_enabled from github.scim.users su inner join github.users.users u ON substr(su.userName, 1, instr(su.userName, '@') - 1) = u.username and substr(su.userName, 1, instr(su.userName, '@') - 1) = u.login where su.org = 'dummyorg' order by su.id asc;"</msg>
<msg timestamp="20220719 22:12:50.495" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:50.644" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:50.645" level="INFO">|-----------|----------------------|--------------------------------------|-----------|-------------------|
|   col_1   |      externalId      |                  id                  |   login   | is_two_fa_enabled |
|-----------|----------------------|--------------------------------------|-----------|-------------------|
| octocat   | 00u1dhhb1fkIGP7RL1d8 | 5fc0c238-1112-11e8-8e45-920c87bdbd75 | octocat   | null              |
|-----------|----------------------|--------------------------------------|-----------|-------------------|
| crazydude | 00u1dhhb1fkIGP7RL1d9 | 5fc0c238-1112-11e8-8e45-920c87bdbd76 | crazydude | null              |
|-----------|----------------------|--------------------------------------|-----------|-------------------|</msg>
<msg timestamp="20220719 22:12:50.645" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:50.486" endtime="20220719 22:12:50.645"/>
</kw>
<status status="PASS" starttime="20220719 22:12:50.484" endtime="20220719 22:12:50.647"/>
</test>
<test id="s1-s2-t32" name="Page Limited Select Github">
<kw name="Should Stackql Exec Inline Equal Page Limited" library="StackQLInterfaces">
<arg>${STACKQL_EXE}</arg>
<arg>2</arg>
<arg>${OKTA_SECRET_STR}</arg>
<arg>${GITHUB_SECRET_STR}</arg>
<arg>${K8S_SECRET_STR}</arg>
<arg>${REGISTRY_NO_VERIFY_CFG_STR}</arg>
<arg>${AUTH_CFG_STR}</arg>
<arg>${SELECT_GITHUB_ORGS_MEMBERS}</arg>
<arg>${SELECT_GITHUB_ORGS_MEMBERS_PAGE_LIMITED_EXPECTED}</arg>
<msg timestamp="20220719 22:12:50.650" level="INFO">Environment variable 'OKTA_SECRET_KEY' set to value 'some-dummy-api-key'.</msg>
<msg timestamp="20220719 22:12:50.650" level="INFO">Environment variable 'GITHUB_SECRET_KEY' set to value 'some-dummy-github-key'.</msg>
<msg timestamp="20220719 22:12:50.650" level="INFO">Environment variable 'K8S_SECRET_KEY' set to value 'some-k8s-token'.</msg>
<msg timestamp="20220719 22:12:50.650" level="INFO">Starting process:
/Users/admin/stackql/stackql-devel/build/stackql exec "--registry={\"url\": \"file:///Users/admin/stackql/stackql-devel/test/registry-mocked\", \"localDocRoot\": \"/Users/admin/stackql/stackql-devel/test/registry-mocked\", \"useEmbedded\": false, \"verifyConfig\": {\"nopVerify\": true}}" "--auth={\"google\": {\"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/google/functional-test-dummy-sa-key.json\", \"type\": \"service_account\"}, \"okta\": {\"credentialsenvvar\": \"OKTA_SECRET_KEY\", \"type\": \"api_key\"}, \"aws\": {\"type\": \"aws_signing_v4\", \"credentialsfilepath\": \"/Users/admin/stackql/stackql-devel/test/assets/credentials/dummy/aws/functional-test-dummy-aws-key.txt\", \"keyID\": \"NON_SECRET\"}, \"github\": {\"type\": \"basic\", \"credentialsenvvar\": \"GITHUB_SECRET_KEY\"}, \"k8s\": {\"credentialsenvvar\": \"K8S_SECRET_KEY\", \"type\": \"api_key\", \"valuePrefix\": \"Bearer \"}}" --tls.allowInsecure=true "select om.login from github.orgs.members om where om.org = 'dummyorg' order by om.login desc;" --http.response.pageLimit=2</msg>
<msg timestamp="20220719 22:12:50.657" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:50.829" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:50.829" level="INFO">|--------------|
|    login     |
|--------------|
| octocat-2    |
|--------------|
| octocat-1    |
|--------------|
| mrfootball-2 |
|--------------|
| mrfootball-1 |
|--------------|
| knuckles-2   |
|--------------|
| knuckles-1   |
|--------------|
| decapod-2    |
|--------------|
| decapod-1    |
|--------------|</msg>
<msg timestamp="20220719 22:12:50.829" level="INFO"/>
<status status="PASS" starttime="20220719 22:12:50.648" endtime="20220719 22:12:50.830"/>
</kw>
<status status="PASS" starttime="20220719 22:12:50.647" endtime="20220719 22:12:50.831"/>
</test>
<test id="s1-s2-t33" name="Basic Query mTLS Returns OK">
<kw name="Should PG Client Inline Contain" library="StackQLInterfaces">
<arg>/Users/admin/stackql/stackql-devel/test/robot/functional</arg>
<arg>${PSQL_EXE}</arg>
<arg>${PSQL_MTLS_CONN_STR}</arg>
<arg>${SELECT_CONTAINER_SUBNET_AGG_ASC}</arg>
<arg>ipCidrRange</arg>
<msg timestamp="20220719 22:12:50.833" level="INFO">Starting process:
psql -d "host=127.0.0.1 port=5476 user=myuser sslmode=verify-full sslcert=/Users/admin/stackql/stackql-devel/test/server/mtls/credentials/pg_client_cert.pem sslkey=/Users/admin/stackql/stackql-devel/test/server/mtls/credentials/pg_client_key.pem sslrootcert=/Users/admin/stackql/stackql-devel/test/server/mtls/credentials/pg_server_cert.pem dbname=mydatabase" -c "select ipCidrRange, sum(5) cc  from  google.container.`projects.aggregated.usableSubnetworks` where projectsId = 'testing-project' group by \"ipCidrRange\" having sum(5) &gt;= 5 order by ipCidrRange asc;"</msg>
<msg timestamp="20220719 22:12:50.844" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:50.864" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:50.864" level="INFO"/>
<msg timestamp="20220719 22:12:50.864" level="INFO">psql: error: connection to server at "127.0.0.1", port 5476 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?</msg>
<msg timestamp="20220719 22:12:50.871" level="FAIL">'' does not contain 'ipCidrRange'</msg>
<status status="FAIL" starttime="20220719 22:12:50.832" endtime="20220719 22:12:50.871"/>
</kw>
<status status="FAIL" starttime="20220719 22:12:50.831" endtime="20220719 22:12:50.872">'' does not contain 'ipCidrRange'</status>
</test>
<test id="s1-s2-t34" name="Basic Query unencrypted Returns OK">
<kw name="Should PG Client Inline Contain" library="StackQLInterfaces">
<arg>/Users/admin/stackql/stackql-devel/test/robot/functional</arg>
<arg>${PSQL_EXE}</arg>
<arg>${PSQL_UNENCRYPTED_CONN_STR}</arg>
<arg>${SELECT_CONTAINER_SUBNET_AGG_ASC}</arg>
<arg>ipCidrRange</arg>
<msg timestamp="20220719 22:12:50.876" level="INFO">Starting process:
psql -d "host=127.0.0.1 port=5477 user=myuser dbname=mydatabase" -c "select ipCidrRange, sum(5) cc  from  google.container.`projects.aggregated.usableSubnetworks` where projectsId = 'testing-project' group by \"ipCidrRange\" having sum(5) &gt;= 5 order by ipCidrRange asc;"</msg>
<msg timestamp="20220719 22:12:50.885" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:50.894" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:50.894" level="INFO"/>
<msg timestamp="20220719 22:12:50.895" level="INFO">psql: error: connection to server at "127.0.0.1", port 5477 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?</msg>
<msg timestamp="20220719 22:12:50.896" level="FAIL">'' does not contain 'ipCidrRange'</msg>
<status status="FAIL" starttime="20220719 22:12:50.874" endtime="20220719 22:12:50.896"/>
</kw>
<status status="FAIL" starttime="20220719 22:12:50.873" endtime="20220719 22:12:50.897">'' does not contain 'ipCidrRange'</status>
</test>
<test id="s1-s2-t35" name="Erroneous mTLS Config Plus Basic Query Returns Error">
<kw name="Should PG Client Error Inline Contain" library="StackQLInterfaces">
<arg>/Users/admin/stackql/stackql-devel/test/robot/functional</arg>
<arg>${PSQL_EXE}</arg>
<arg>${PSQL_MTLS_INVALID_CONN_STR}</arg>
<arg>${SELECT_CONTAINER_SUBNET_AGG_ASC}</arg>
<arg>error</arg>
<msg timestamp="20220719 22:12:50.900" level="INFO">Starting process:
psql -d "host=127.0.0.1 port=5476 user=myuser sslmode=verify-full sslcert=/Users/admin/stackql/stackql-devel/test/server/mtls/credentials/pg_rubbish_cert.pem sslkey=/Users/admin/stackql/stackql-devel/test/server/mtls/credentials/pg_rubbish_key.pem sslrootcert=/Users/admin/stackql/stackql-devel/test/server/mtls/credentials/pg_server_cert.pem dbname=mydatabase" -c "select ipCidrRange, sum(5) cc  from  google.container.`projects.aggregated.usableSubnetworks` where projectsId = 'testing-project' group by \"ipCidrRange\" having sum(5) &gt;= 5 order by ipCidrRange asc;"</msg>
<msg timestamp="20220719 22:12:50.907" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20220719 22:12:50.919" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:12:50.919" level="INFO"/>
<msg timestamp="20220719 22:12:50.919" level="INFO">psql: error: connection to server at "127.0.0.1", port 5476 failed: Connection refused
	Is the server running on that host and accepting TCP/IP connections?</msg>
<status status="PASS" starttime="20220719 22:12:50.898" endtime="20220719 22:12:50.920"/>
</kw>
<status status="PASS" starttime="20220719 22:12:50.897" endtime="20220719 22:12:50.921"/>
</test>
<status status="FAIL" starttime="20220719 22:12:22.405" endtime="20220719 22:12:50.923"/>
</suite>
<kw name="Terminate All Processes" library="Process" type="TEARDOWN">
<doc>Terminates all still running processes started by this library.</doc>
<msg timestamp="20220719 22:12:50.936" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20220719 22:13:21.030" level="INFO">Graceful termination failed.</msg>
<msg timestamp="20220719 22:13:21.031" level="INFO">Forcefully killing process.</msg>
<msg timestamp="20220719 22:13:21.134" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:13:21.134" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20220719 22:13:51.192" level="INFO">Graceful termination failed.</msg>
<msg timestamp="20220719 22:13:51.193" level="INFO">Forcefully killing process.</msg>
<msg timestamp="20220719 22:13:51.294" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:13:51.294" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20220719 22:14:21.313" level="INFO">Graceful termination failed.</msg>
<msg timestamp="20220719 22:14:21.314" level="INFO">Forcefully killing process.</msg>
<msg timestamp="20220719 22:14:21.415" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:14:21.415" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20220719 22:14:21.821" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:14:21.821" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20220719 22:14:51.897" level="INFO">Graceful termination failed.</msg>
<msg timestamp="20220719 22:14:51.898" level="INFO">Forcefully killing process.</msg>
<msg timestamp="20220719 22:14:52.004" level="INFO">Process completed.</msg>
<msg timestamp="20220719 22:14:52.004" level="INFO">Gracefully terminating process.</msg>
<msg timestamp="20220719 22:14:52.429" level="INFO">Process completed.</msg>
<status status="PASS" starttime="20220719 22:12:50.935" endtime="20220719 22:14:52.430"/>
</kw>
<status status="FAIL" starttime="20220719 22:11:31.118" endtime="20220719 22:14:52.431"/>
</suite>
<statistics>
<total>
<stat pass="40" fail="2" skip="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="40" fail="2" skip="0" id="s1" name="Functional">Functional</stat>
<stat pass="7" fail="0" skip="0" id="s1-s1" name="Stackql From Cmd Line">Functional.Stackql From Cmd Line</stat>
<stat pass="33" fail="2" skip="0" id="s1-s2" name="Stackql Mocked From Cmd Line">Functional.Stackql Mocked From Cmd Line</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
